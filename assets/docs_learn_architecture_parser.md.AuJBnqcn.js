import{O as e,p as t,u as n}from"./chunks/runtime-core.esm-bundler.C80uTydv.js";import{t as r}from"./chunks/plugin-vue_export-helper.DTeiOEMk.js";const i=JSON.parse(`{"title":"Parser","description":"","frontmatter":{"title":"Parser","outline":"deep","head":[["meta",{"property":"og:title","content":"Parser"}],["meta",{"name":"twitter:title","content":"Parser"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/learn/architecture/parser.html"}]]},"headers":[],"relativePath":"docs/learn/architecture/parser.md","filePath":"docs/learn/architecture/parser.md"}`);var a={name:`docs/learn/architecture/parser.md`};function o(r,i,a,o,s,c){return e(),n(`div`,null,[...i[0]||=[t(`<h1 id="parser-architecture" tabindex="-1">Parser Architecture <a class="header-anchor" href="#parser-architecture" aria-label="Permalink to “Parser Architecture”">​</a></h1><p>Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.</p><p>As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools. By developing our parser, we have the opportunity to explore and implement well-researched performance techniques.</p><h2 id="ast-design-philosophy" tabindex="-1">AST Design Philosophy <a class="header-anchor" href="#ast-design-philosophy" aria-label="Permalink to “AST Design Philosophy”">​</a></h2><p>While many existing JavaScript tools rely on <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree</a> as their AST specification, a notable drawback is its abundance of ambiguous nodes. This ambiguity often leads to confusion during development with <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree</a>.</p><p>The Oxc AST differs from the <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree</a> AST by removing ambiguous nodes and introducing distinct types. For example, instead of using a generic <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree</a> <code>Identifier</code>, the Oxc AST provides specific types such as <code>BindingIdentifier</code>, <code>IdentifierReference</code>, and <code>IdentifierName</code>.</p><p>This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification.</p><h3 id="ast-node-types" tabindex="-1">AST Node Types <a class="header-anchor" href="#ast-node-types" aria-label="Permalink to “AST Node Types”">​</a></h3><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instead of generic Identifier</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BindingIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Atom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IdentifierReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Atom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reference_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReferenceId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IdentifierName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Atom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="semantic-clarity" tabindex="-1">Semantic Clarity <a class="header-anchor" href="#semantic-clarity" aria-label="Permalink to “Semantic Clarity”">​</a></h3><p>This approach provides semantic clarity:</p><ul><li><strong><code>BindingIdentifier</code></strong>: Variable declarations (<code>let x = 1</code>)</li><li><strong><code>IdentifierReference</code></strong>: Variable usage (<code>console.log(x)</code>)</li><li><strong><code>IdentifierName</code></strong>: Property names (<code>obj.property</code>)</li></ul><h2 id="performance-architecture" tabindex="-1">Performance Architecture <a class="header-anchor" href="#performance-architecture" aria-label="Permalink to “Performance Architecture”">​</a></h2><h3 id="how-is-it-so-fast" tabindex="-1">How is it so fast <a class="header-anchor" href="#how-is-it-so-fast" aria-label="Permalink to “How is it so fast”">​</a></h3><ul><li><strong>Memory Arena</strong>: AST is allocated in a <a href="https://crates.io/crates/bumpalo" target="_blank" rel="noreferrer">memory arena</a> for fast allocation and deallocation</li><li><strong>String Optimization</strong>: Short strings are inlined by <a href="https://crates.io/crates/compact_str" target="_blank" rel="noreferrer">CompactString</a></li><li><strong>Minimal Heap Usage</strong>: No other heap allocations are done except the above two</li><li><strong>Separation of Concerns</strong>: Scope binding, symbol resolution and some syntax errors are delegated to the semantic analyzer</li></ul><h3 id="memory-management-details" tabindex="-1">Memory Management Details <a class="header-anchor" href="#memory-management-details" aria-label="Permalink to “Memory Management Details”">​</a></h3><h4 id="arena-allocation" tabindex="-1">Arena Allocation <a class="header-anchor" href="#arena-allocation" aria-label="Permalink to “Arena Allocation”">​</a></h4><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> oxc_allocator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Allocator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// All AST nodes are allocated in this arena</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allocator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Allocator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ast_node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allocator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NumericLiteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allocator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NumericLiteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SPAN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>Benefits:</p><ul><li><strong>O(1) allocation</strong>: Simple pointer bump</li><li><strong>O(1) deallocation</strong>: Drop entire arena at once</li><li><strong>Cache-friendly</strong>: Linear memory layout</li><li><strong>No fragmentation</strong>: Continuous memory usage</li></ul><h4 id="string-interning-with-compactstring" tabindex="-1">String Interning with CompactString <a class="header-anchor" href="#string-interning-with-compactstring" aria-label="Permalink to “String Interning with CompactString”">​</a></h4><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Strings ≤ 24 bytes are stored inline (no heap allocation)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> short_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompactString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;variableName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Stack allocated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> long_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompactString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a_very_long_variable_name_that_exceeds_limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Heap allocated</span></span></code></pre></div><p>This reduces memory allocations for the majority of JavaScript identifiers and string literals.</p><h2 id="parser-architecture-1" tabindex="-1">Parser Architecture <a class="header-anchor" href="#parser-architecture-1" aria-label="Permalink to “Parser Architecture”">​</a></h2><h3 id="two-phase-design" tabindex="-1">Two-Phase Design <a class="header-anchor" href="#two-phase-design" aria-label="Permalink to “Two-Phase Design”">​</a></h3><p>The Oxc parser follows a two-phase approach:</p><ol><li><strong>Parsing Phase</strong>: Build AST structure with minimal semantic analysis</li><li><strong>Semantic Phase</strong>: Perform scope analysis, symbol resolution, and advanced error checking</li></ol><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Phase 1: Parse to AST</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allocator, source_text, source_type)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Phase 2: Semantic analysis</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> semantic_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SemanticBuilder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source_text, source_type)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with_trivias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parser_result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trivias)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser_result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">program);</span></span></code></pre></div><h3 id="parser-components" tabindex="-1">Parser Components <a class="header-anchor" href="#parser-components" aria-label="Permalink to “Parser Components”">​</a></h3><h4 id="lexer" tabindex="-1">Lexer <a class="header-anchor" href="#lexer" aria-label="Permalink to “Lexer”">​</a></h4><ul><li><strong>Token generation</strong>: Converts source text to structured tokens</li><li><strong>SIMD optimization</strong>: Uses SIMD instructions for whitespace skipping</li><li><strong>Context-aware</strong>: Handles regex vs division operator disambiguation</li></ul><h4 id="recursive-descent-parser" tabindex="-1">Recursive Descent Parser <a class="header-anchor" href="#recursive-descent-parser" aria-label="Permalink to “Recursive Descent Parser”">​</a></h4><ul><li><strong>Hand-written</strong>: Custom implementation for maximum performance</li><li><strong>Error recovery</strong>: Advanced error handling with meaningful messages</li><li><strong>Grammar compliance</strong>: Follows ECMAScript specification precisely</li></ul><h4 id="ast-builder" tabindex="-1">AST Builder <a class="header-anchor" href="#ast-builder" aria-label="Permalink to “AST Builder”">​</a></h4><ul><li><strong>Type safety</strong>: Leverages Rust&#39;s type system for correctness</li><li><strong>Memory efficiency</strong>: Direct arena allocation</li><li><strong>Builder pattern</strong>: Convenient node construction methods</li></ul><h2 id="conformance-strategy" tabindex="-1">Conformance Strategy <a class="header-anchor" href="#conformance-strategy" aria-label="Permalink to “Conformance Strategy”">​</a></h2><h3 id="test-suite-coverage" tabindex="-1">Test Suite Coverage <a class="header-anchor" href="#test-suite-coverage" aria-label="Permalink to “Test Suite Coverage”">​</a></h3><ul><li><strong>Test262</strong>: 100% pass rate on ECMAScript conformance tests</li><li><strong>Babel</strong>: 99.62% compatibility with Babel parser tests</li><li><strong>TypeScript</strong>: 99.86% compatibility with TypeScript compiler tests</li></ul><h3 id="error-handling-philosophy" tabindex="-1">Error Handling Philosophy <a class="header-anchor" href="#error-handling-philosophy" aria-label="Permalink to “Error Handling Philosophy”">​</a></h3><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Meaningful error messages with source location</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OxcDiagnostic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> span</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> severity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Severity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> help</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The parser provides:</p><ul><li><strong>Precise error locations</strong>: Exact source positions</li><li><strong>Recovery strategies</strong>: Continue parsing after errors</li><li><strong>Helpful suggestions</strong>: Actionable error messages</li></ul><h2 id="advanced-features" tabindex="-1">Advanced Features <a class="header-anchor" href="#advanced-features" aria-label="Permalink to “Advanced Features”">​</a></h2><h3 id="typescript-support" tabindex="-1">TypeScript Support <a class="header-anchor" href="#typescript-support" aria-label="Permalink to “TypeScript Support”">​</a></h3><ul><li><strong>Type stripping</strong>: Removes TypeScript-specific syntax</li><li><strong>Decorator parsing</strong>: Handles experimental decorators</li><li><strong>Namespace support</strong>: Full module and namespace parsing</li><li><strong>JSX integration</strong>: TypeScript + JSX (TSX) support</li></ul><h3 id="research-areas" tabindex="-1">Research Areas <a class="header-anchor" href="#research-areas" aria-label="Permalink to “Research Areas”">​</a></h3><ul><li><strong>SIMD text processing</strong>: Vectorized string operations</li><li><strong>Cache optimization</strong>: Minimize memory access patterns</li><li><strong>Branch prediction</strong>: Optimize hot parsing paths</li><li><strong>Zero-copy parsing</strong>: Eliminate unnecessary string copies</li></ul>`,47)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};