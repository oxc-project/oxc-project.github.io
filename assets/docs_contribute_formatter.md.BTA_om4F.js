import{O as e,p as t,u as n}from"./chunks/runtime-core.esm-bundler.DoAIpvg0.js";import{t as r}from"./chunks/plugin-vue_export-helper.BIFBW11O.js";const i=JSON.parse(`{"title":"Formatter","description":"","frontmatter":{"title":"Formatter","outline":"deep","head":[["meta",{"property":"og:title","content":"Formatter"}],["meta",{"name":"twitter:title","content":"Formatter"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/contribute/formatter.html"}]]},"headers":[],"relativePath":"docs/contribute/formatter.md","filePath":"docs/contribute/formatter.md"}`);var a={name:`docs/contribute/formatter.md`};function o(r,i,a,o,s,c){return e(),n(`div`,null,[...i[0]||=[t(`<h1 id="formatter-prettier" tabindex="-1">Formatter (Prettier) <a class="header-anchor" href="#formatter-prettier" aria-label="Permalink to “Formatter (Prettier)”">​</a></h1><p>We are currently porting Prettier and Biome Formatter to Oxc to create a high-performance, Prettier-compatible formatter.</p><h2 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to “Architecture Overview”">​</a></h2><p>The Oxc formatter is built around the same core concepts as Prettier but with significant performance optimizations:</p><ul><li><strong>Document Model</strong>: Uses Prettier and Biome&#39;s document IR (Intermediate Representation)</li><li><strong>Pretty Printing</strong>: Implements Wadler&#39;s pretty printing algorithm</li><li><strong>AST Integration</strong>: Leverages Oxc&#39;s fast parser for optimal performance</li></ul><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to “Performance Considerations”">​</a></h2><h3 id="optimization-strategies" tabindex="-1">Optimization Strategies <a class="header-anchor" href="#optimization-strategies" aria-label="Permalink to “Optimization Strategies”">​</a></h3><ul><li><strong>Memory Arena</strong>: AST allocated in bump allocator</li><li><strong>String Interning</strong>: Reuse common strings</li><li><strong>Lazy Evaluation</strong>: Defer expensive computations</li></ul><h2 id="current-challenges" tabindex="-1">Current Challenges <a class="header-anchor" href="#current-challenges" aria-label="Permalink to “Current Challenges”">​</a></h2><h3 id="technical-challenges" tabindex="-1">Technical Challenges <a class="header-anchor" href="#technical-challenges" aria-label="Permalink to “Technical Challenges”">​</a></h3><ol><li><strong>Comment Handling</strong>: Preserving comment placement and formatting</li><li><strong>JavaScript Quirks</strong>: Handling edge cases in JavaScript syntax</li><li><strong>Performance vs Compatibility</strong>: Balancing speed with exact Prettier output</li><li><strong>Memory Management</strong>: Efficient handling of large files</li></ol><h3 id="missing-features" tabindex="-1">Missing Features <a class="header-anchor" href="#missing-features" aria-label="Permalink to “Missing Features”">​</a></h3><ul><li>[ ] Plugin system compatibility</li><li>[ ] Configuration file support</li><li>[ ] Editor integrations</li><li>[ ] CLI tool</li><li>[ ] Language server protocol</li></ul>`,13)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};