import{O as e,p as t,u as n}from"./chunks/runtime-core.esm-bundler.DUsM2pzQ.js";import{t as r}from"./chunks/plugin-vue_export-helper.DbjsT2lH.js";const i=JSON.parse(`{"title":"VSCode Extension","description":"","frontmatter":{"title":"VSCode Extension","outline":"deep","head":[["meta",{"property":"og:title","content":"VSCode Extension"}],["meta",{"name":"twitter:title","content":"VSCode Extension"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/contribute/vscode.html"}]]},"headers":[],"relativePath":"docs/contribute/vscode.md","filePath":"docs/contribute/vscode.md"}`);var a={name:`docs/contribute/vscode.md`};function o(r,i,a,o,s,c){return e(),n(`div`,null,[...i[0]||=[t(`<h1 id="vscode-extension" tabindex="-1">VSCode Extension <a class="header-anchor" href="#vscode-extension" aria-label="Permalink to “VSCode Extension”">​</a></h1><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to “Development”">​</a></h2><p>Make sure you setup the <code>oxc</code> project with <code>just init</code>. Some tools are required for that. More information inside the <code>justfile</code> located on the root <code>oxc</code> project.</p><p>After <code>just init</code> run <code>pnpm install</code> inside <code>editors/vscode</code> directory.</p><h2 id="building-extension-and-installing-it-locally" tabindex="-1">Building Extension and Installing it locally <a class="header-anchor" href="#building-extension-and-installing-it-locally" aria-label="Permalink to “Building Extension and Installing it locally”">​</a></h2><p>Inside <code>editors/vscode</code> run <code>pnpm build</code> to compile the vscode extension and build the release version of the language server. Run <code>pnpm install-extension</code> to install it on your VSCode Editor. Hit <code>CTRL</code> + <code>SHIFT</code> + <code>P</code> and the search for &quot;Developer: Reload Window&quot;. You are able now to manual test your changes inside VSCode.</p><h3 id="building-debug-version-of-server" tabindex="-1">Building Debug Version of Server <a class="header-anchor" href="#building-debug-version-of-server" aria-label="Permalink to “Building Debug Version of Server”">​</a></h3><p>Running <code>pnpm build</code> will build the release version of the server, This can take some time. If you want faster feedback use the follow flow:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compile</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # transform TS Code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server:build:debug</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # build the debug version of the language server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # package it as VSCode Extension</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install-extension</span></span></code></pre></div><p>Make sure to tell the VSCode Extension to use the debug build with the env variable: <code>SERVER_PATH_DEV=&quot;/workspace/editors/vscode/target/debug/oxc_language_server&quot;</code>.</p><p>Or use the Extension Settings with <code>settings.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;oxc.path.server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./editors/vscode/target/debug/oxc_language_server&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>For Windows, the <code>oxc_language_server</code> will be provided with a <code>exe</code> extension.</p><h3 id="use-the-output-channel" tabindex="-1">Use the Output Channel <a class="header-anchor" href="#use-the-output-channel" aria-label="Permalink to “Use the Output Channel”">​</a></h3><p>To understand what the Extension and the Language Server is doing, you can use the <code>Oxc</code> Output Channel inside VSCode. The get more information use the Extension Setting inside <code>settings.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;oxc.trace.server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;verbose&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>On <code>oxc_language_server</code> you can use the <code>info!</code> or <code>error!</code> macro to send messages to the output channel.</p><h3 id="writing-a-test" tabindex="-1">Writing a Test <a class="header-anchor" href="#writing-a-test" aria-label="Permalink to “Writing a Test”">​</a></h3><p>Depending on the changes, you should create a Test for it. Tests on the <code>oxc_language_server</code> will make sure the (Server)Linter works as expected. Write Tests in <code>vscode</code> when you want to test changing behavior. Example: expecting a lint fix to be applied, when executing a command or code action.</p>`,19)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};