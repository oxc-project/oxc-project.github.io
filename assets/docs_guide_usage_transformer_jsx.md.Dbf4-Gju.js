import{O as e,p as t,u as n}from"./chunks/runtime-core.esm-bundler.DoAIpvg0.js";import{t as r}from"./chunks/plugin-vue_export-helper.BIFBW11O.js";const i=JSON.parse(`{"title":"JSX","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"JSX"}],["meta",{"name":"twitter:title","content":"JSX"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/guide/usage/transformer/jsx.html"}]]},"headers":[],"relativePath":"docs/guide/usage/transformer/jsx.md","filePath":"docs/guide/usage/transformer/jsx.md"}`);var a={name:`docs/guide/usage/transformer/jsx.md`};function o(r,i,a,o,s,c){return e(),n(`div`,null,[...i[0]||=[t(`<h1 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-label="Permalink to “JSX”">​</a></h1><p>Oxc transformer supports transforming JSX.</p><h2 id="general-usage" tabindex="-1">General Usage <a class="header-anchor" href="#general-usage" aria-label="Permalink to “General Usage”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;App.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsx: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    runtime: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;automatic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or &quot;classic&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    development: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throwIfNamespace: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or false, currently noop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    importSource: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pragma: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;React.createElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pragmaFrag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;React.Fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    refresh: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// see below</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // When transforming TSX files:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  typescript: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxPragma: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;React.createElement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// same value with \`jsx.pragma\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsxPragmaFrag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;React.Fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// same value with \`jsx.pragmaFrag\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>You can also set <code>jsx: &#39;preserve&#39;</code> to disable JSX transformation.</p><p>Oxc transformer also supports JSX pragma comments, which is also supported by <a href="https://babeljs.io/docs/babel-preset-react/" target="_blank" rel="noreferrer">Babel</a> and <a href="https://esbuild.github.io/api/#jsx" target="_blank" rel="noreferrer">esbuild</a>. Pragma comments are useful for configuring JSX options on a per-file basis.</p><h2 id="runtime" tabindex="-1">Runtime <a class="header-anchor" href="#runtime" aria-label="Permalink to “Runtime”">​</a></h2><p>By default, the automatic runtime transform is used. This transform was <a href="https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html" target="_blank" rel="noreferrer">introduced in React 17+</a>. This transform injects the required <code>import</code> statements automatically.</p><p>You can also use the classic runtime transform by setting <code>jsx.runtime</code> option to <code>&quot;classic&quot;</code>.</p><p><code>// @jsxRuntime classic</code> / <code>// @jsxRuntime automatic</code> are the way to configure this via pragma comments.</p><h2 id="common-options-for-both-runtimes" tabindex="-1">Common Options for Both Runtimes <a class="header-anchor" href="#common-options-for-both-runtimes" aria-label="Permalink to “Common Options for Both Runtimes”">​</a></h2><h3 id="development-transform" tabindex="-1">Development Transform <a class="header-anchor" href="#development-transform" aria-label="Permalink to “Development Transform”">​</a></h3><p>By default, the development specific transforms are disabled. You can enable them by setting <code>jsx.development</code> option to <code>true</code>.</p><h3 id="xml-namespaced-tag-names" tabindex="-1">XML Namespaced Tag Names <a class="header-anchor" href="#xml-namespaced-tag-names" aria-label="Permalink to “XML Namespaced Tag Names”">​</a></h3><p>By default, an error is thrown if the XML namespaced tag names (e.g. <code>&lt;foo:bar baz:qux=&quot;foobar&quot; /&gt;</code>) are used. Though the JSX spec allows this, it is disabled by default since React&#39;s JSX does not currently support them.</p><h2 id="automatic-runtime-specific-options" tabindex="-1">Automatic Runtime Specific Options <a class="header-anchor" href="#automatic-runtime-specific-options" aria-label="Permalink to “Automatic Runtime Specific Options”">​</a></h2><h3 id="import-source" tabindex="-1">Import Source <a class="header-anchor" href="#import-source" aria-label="Permalink to “Import Source”">​</a></h3><p>This option specifies the import source for the JSX helper functions. The default value is <code>&quot;react&quot;</code>.</p><p>For example, if you want to use the <code>preact</code> package instead of <code>react</code>, you can set <code>jsx.importSource</code> to <code>&quot;preact&quot;</code>, then the following import statements may be injected:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createElement } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;preact&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Fragment, jsxDEV } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;preact/jsx-dev-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Fragment, jsx, jsxs } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;preact/jsx-runtime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>// @jsxImportSource preact</code> is the way to configure this via pragma comments.</p><h2 id="classic-runtime-specific-options" tabindex="-1">Classic Runtime Specific Options <a class="header-anchor" href="#classic-runtime-specific-options" aria-label="Permalink to “Classic Runtime Specific Options”">​</a></h2><h3 id="pragma" tabindex="-1">Pragma <a class="header-anchor" href="#pragma" aria-label="Permalink to “Pragma”">​</a></h3><p>This option specifies the function name to use when transforming JSX expressions. It should be a qualified name (e.g. <code>React.createElement</code>) or an identifier (e.g. <code>createElement</code>). This option is called <code>jsxFactory</code> in esbuild.</p><p><code>// @jsx createElement</code> is the way to configure this via pragma comments.</p><h3 id="pragma-fragment" tabindex="-1">Pragma Fragment <a class="header-anchor" href="#pragma-fragment" aria-label="Permalink to “Pragma Fragment”">​</a></h3><p>This option specifies the function name to use when transforming JSX fragments. It should be a valid JSX tag name. This option is called <code>jsxFragment</code> in esbuild.</p><p><code>// @jsxFrag Fragment</code> is the way to configure this via pragma comments.</p><h2 id="react-refresh" tabindex="-1">React Refresh <a class="header-anchor" href="#react-refresh" aria-label="Permalink to “React Refresh”">​</a></h2><p>React Refresh (also known as React Fast Refresh) provides hot reloading capabilities for React components during development.</p><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to “Usage”">​</a></h3><p>To enable React Refresh transformation, set <code>jsx.refresh</code> option:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;App.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsx: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    development: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    refresh: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // refresh: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //   refreshReg: &quot;$RefreshReg$&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //   refreshSig: &quot;$RefreshSig$&quot;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //   emitFullSignatures: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to “Configuration Options”">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>refreshReg</code></td><td><code>string</code></td><td><code>&quot;$RefreshReg$&quot;</code></td><td>The name of the function to register components for refresh</td></tr><tr><td><code>refreshSig</code></td><td><code>string</code></td><td><code>&quot;$RefreshSig$&quot;</code></td><td>The name of the function to create signatures for refresh</td></tr><tr><td><code>emitFullSignatures</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Whether to emit full signatures for better debugging</td></tr></tbody></table>`,35)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};