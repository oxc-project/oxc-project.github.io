import{M as e,O as t,h as n,p as r,u as i}from"./chunks/runtime-core.esm-bundler.C80uTydv.js";import{t as a}from"./chunks/plugin-vue_export-helper.DTeiOEMk.js";const o=JSON.parse(`{"title":"Oxlint Type-Aware Preview","description":"","frontmatter":{"title":"Oxlint Type-Aware Preview","outline":"deep","authors":["boshen","auvred","camchenry","cameron"],"head":[["meta",{"property":"og:title","content":"Oxlint Type-Aware Preview"}],["meta",{"name":"twitter:title","content":"Oxlint Type-Aware Preview"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/blog/2025-08-17-oxlint-type-aware.html"}]]},"headers":[],"relativePath":"blog/2025-08-17-oxlint-type-aware.md","filePath":"blog/2025-08-17-oxlint-type-aware.md"}`);var s={name:`blog/2025-08-17-oxlint-type-aware.md`};function c(a,o,s,c,l,u){let d=e(`AppBlogPostHeader`);return t(),i(`div`,null,[n(d),o[0]||=r(`<br><p>We&#39;re thrilled to announce type-aware linting in <code>oxlint</code>!</p><p>The long-awaited <code>no-floating-promises</code> and related rules are here.</p><p>This preview release aims to engage with the community for collaboration and discussion by documenting our decision process and technical details.</p><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to “Quick Start”">​</a></h2><p>If <code>oxlint</code> is already configured, install <code>oxlint-tsgolint</code> and run <code>oxlint</code> with the <code>--type-aware</code> flag:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type-aware</span></span></code></pre></div><p>If <code>oxlint</code> is not configured but you want to see <code>no-floating-promises</code> in action:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type-aware</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript/no-floating-promises</span></span></code></pre></div><p>We expect to see, for example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> × typescript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eslint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">floating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promises): Promises must be awaited, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a call to .catch, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a call to .then </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a rejection handler or be explicitly marked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ignored</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`void\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ╭─[packages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rolldown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">watch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">watcher.ts:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">29</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> │       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> │       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">originClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ·       ──────────────</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> │     };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ╰────</span></span></code></pre></div><p>Please visit our <a href="https://oxc.rs/docs/guide/usage/linter.html" target="_blank" rel="noreferrer">usage guide</a> for more configuration options.</p><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to “Performance”">​</a></h2><p>Our testing shows that repositories which previously took a minute to run with <code>typescript-eslint</code> now complete in less than 10 seconds.</p><p>This is achieved by leveraging <a href="https://github.com/microsoft/typescript-go" target="_blank" rel="noreferrer"><code>typescript-go</code></a>, the <a href="https://devblogs.microsoft.com/typescript/typescript-native-port" target="_blank" rel="noreferrer">10x faster TypeScript</a> written in Go.</p><p>Using projects from <a href="https://github.com/oxc-project/oxlint-ecosystem-ci" target="_blank" rel="noreferrer">oxlint-ecosystem-ci</a>:</p><table tabindex="0"><thead><tr><th>Project</th><th>Files</th><th>Time</th></tr></thead><tbody><tr><td>napi-rs</td><td>144</td><td>1.0s</td></tr><tr><td>preact</td><td>245</td><td>2.7s</td></tr><tr><td>rolldown</td><td>314</td><td>1.5s</td></tr><tr><td>bluesky</td><td>1152</td><td>7.0s</td></tr></tbody></table><h2 id="type-aware-linting" tabindex="-1">Type-Aware Linting <a class="header-anchor" href="#type-aware-linting" aria-label="Permalink to “Type-Aware Linting”">​</a></h2><p>Please refer to <a href="https://www.joshuakgoldberg.com/blog/rust-based-javascript-linters-fast-but-no-typed-linting-right-now" target="_blank" rel="noreferrer">Rust-Based JavaScript Linters: Fast, But No Typed Linting Right Now</a> to understand the current status of type-aware linting in the ecosystem.</p><h2 id="technical-details" tabindex="-1">Technical Details <a class="header-anchor" href="#technical-details" aria-label="Permalink to “Technical Details”">​</a></h2><p>The core of this new functionality is <a href="https://github.com/oxc-project/tsgolint" target="_blank" rel="noreferrer">oxc-project/tsgolint</a>.</p><p>The <code>tsgolint</code> project was initially prototyped as <a href="https://github.com/typescript-eslint/tsgolint" target="_blank" rel="noreferrer">typescript-eslint/tsgolint</a>. However, the <code>typescript-eslint</code> team decided not to allocate development resources to this prototype, as they plan to continue their work on <code>typescript-eslint</code> for typed linting with ESLint.</p><p><a href="https://github.com/Boshen" target="_blank" rel="noreferrer">@boshen</a> reached out to <a href="https://github.com/auvred" target="_blank" rel="noreferrer">@auvred</a> for a forked, scoped-down version adapted for oxlint. This version would only contain type-aware rules without the sophisticated configuration resolution a full linter would require.</p><p><a href="https://github.com/auvred" target="_blank" rel="noreferrer">@auvred</a> generously offered to continue its development under the Oxc organization.</p><h3 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to “Architecture”">​</a></h3><p><code>oxlint</code> (written in Rust) and <code>tsgolint</code> (written in Go) are compiled into their own binaries.</p><p><code>oxlint</code> serves as the &quot;frontend&quot; for <code>tsgolint</code>, handling the CLI, path traversal, ignore logic, and diagnostic printing.</p><p><code>tsgolint</code> acts as the backend for <code>oxlint</code>, accepting paths and configuration as input and outputting structured diagnostics.</p><p>This creates a simple pipeline:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>oxlint CLI (returns paths + rules + configuration)</span></span>
<span class="line"><span>  -&gt; tsgolint (returns diagnostics)</span></span>
<span class="line"><span>  -&gt; oxlint CLI (prints diagnostics)</span></span></code></pre></div><h3 id="tsgolint" tabindex="-1"><code>tsgolint</code> <a class="header-anchor" href="#tsgolint" aria-label="Permalink to “tsgolint”">​</a></h3><p><code>tsgolint</code> does not communicate with typescript-go via public APIs.</p><p>Instead, it compiles <code>typescript-go</code> by <a href="https://github.com/oxc-project/tsgolint/tree/main/shim" target="_blank" rel="noreferrer">shimming</a> its internal APIs to make them public.</p><p>All type-aware rules are written directly against these shimmed APIs.</p><p>While this isn&#39;t the recommended approach for accessing internals, it works!</p><h2 id="decision-process" tabindex="-1">Decision Process <a class="header-anchor" href="#decision-process" aria-label="Permalink to “Decision Process”">​</a></h2><h3 id="write-our-own-type-checker" tabindex="-1">Write our own type checker <a class="header-anchor" href="#write-our-own-type-checker" aria-label="Permalink to “Write our own type checker”">​</a></h3><p>Previous abandoned attempts to implement a type-checker included:</p><ul><li>My own attempt at <a href="https://gist.github.com/Boshen/d189de0fe0720a30c5182cb666e3e9a5" target="_blank" rel="noreferrer">writing type inference</a></li><li><a href="https://github.com/oxc-project/oxc/pull/413" target="_blank" rel="noreferrer">Integrate</a> <a href="https://github.com/kaleidawave/ezno" target="_blank" rel="noreferrer">ezno type checker</a> by <a href="https://github.com/kaleidawave" target="_blank" rel="noreferrer">@kaleidawave</a></li><li><a href="https://github.com/dudykr/stc" target="_blank" rel="noreferrer">stc</a> by <a href="https://github.com/kdy1" target="_blank" rel="noreferrer">@kdy1</a></li><li>There are also many attempts in the community that did not go far.</li></ul><p>Additionally, there&#39;s the work-in-progress <a href="https://biomejs.dev/blog/biome-v2/" target="_blank" rel="noreferrer">Biome 2.0</a> with its own type-inference implementation.</p><p>We determined that writing our own type-inferencer or type-checker was not feasible due to the challenge of keeping up with a fast-moving target like TypeScript.</p><h3 id="communication-with-typescript-compiler" tabindex="-1">Communication with TypeScript Compiler <a class="header-anchor" href="#communication-with-typescript-compiler" aria-label="Permalink to “Communication with TypeScript Compiler”">​</a></h3><p>Prior to <code>typescript-go</code>, projects added plugin interfaces to TypeScript&#39;s public API by either mapping its AST to <code>estree</code> or directly traversing the TypeScript AST. Examples include:</p><ul><li><a href="https://typescript-eslint.io/getting-started/typed-linting" target="_blank" rel="noreferrer">typescript-eslint</a></li><li><a href="https://github.com/johnsoncodehk/tsslint" target="_blank" rel="noreferrer">tsslint</a></li><li><a href="https://github.com/ArnaudBarre/tsl" target="_blank" rel="noreferrer">tsl</a></li></ul><p>We also explored <a href="https://github.com/oxc-project/oxc/discussions/2855" target="_blank" rel="noreferrer">inter-process communication with oxlint</a> but abandoned the idea.</p><p>With <code>typescript-go</code>, the TypeScript team is <a href="https://github.com/microsoft/typescript-go/discussions/455" target="_blank" rel="noreferrer">leaning towards</a> encoding the TypeScript AST and decoding it on the JavaScript side through inter-process communication.</p><p>While these approaches work, they still incur:</p><ul><li>Performance issues of varying degrees that don&#39;t suit oxlint&#39;s performance characteristics.</li><li>The cost of maintaining an AST mapping from TypeScript&#39;s AST.</li></ul><h2 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-label="Permalink to “Considerations”">​</a></h2><p>While <code>tsgolint</code> solves the performance issue, there are other technical challenges that need to be addressed.</p><h3 id="requirement-for-a-different-typescript-version" tabindex="-1">Requirement for a Different TypeScript Version <a class="header-anchor" href="#requirement-for-a-different-typescript-version" aria-label="Permalink to “Requirement for a Different TypeScript Version”">​</a></h3><p>We plan to release snapshots of <code>typescript-go</code> versions and align their version numbers with TypeScript. You will then be able to install <code>oxlint-typescript</code> with the correct TypeScript version.</p><p>The downside of this approach is that you may need to upgrade TypeScript if <code>oxlint-tsgolint</code> requires changes.</p><h3 id="maintenance-cost-of-tsgolint" tabindex="-1">Maintenance cost of <code>tsgolint</code> <a class="header-anchor" href="#maintenance-cost-of-tsgolint" aria-label="Permalink to “Maintenance cost of tsgolint”">​</a></h3><p>Shimming TypeScript&#39;s internal APIs carries some risk. However, the TypeScript AST and its visitor are actually quite stable. We accept this risk and will fix breaking changes when upgrading <code>typescript-go</code>.</p><p>Our <code>typescript-go</code> version is synced every day.</p><h2 id="performance-issues" tabindex="-1">Performance Issues <a class="header-anchor" href="#performance-issues" aria-label="Permalink to “Performance Issues”">​</a></h2><p><code>tsgolint</code> currently does not perform well on large monorepos with hundreds of projects or lots of project references.</p><p>It may hang with a deadlock or cause OOM (out-of-memory) if a bug is encountered.</p><p>We are actively addressing these issues, profiling and submitting improves to <code>typescript-go</code>, benefiting all <code>typescript-go</code> users.</p><p>Our core team member <a href="https://github.com/camc314" target="_blank" rel="noreferrer">@camc314</a> has already submitted <a href="https://github.com/microsoft/typescript-go/pulls?q=is%3Apr+author%3Acamc314+" target="_blank" rel="noreferrer">many PRs</a> that made several code paths significantly faster.</p><h2 id="v1-0-release" tabindex="-1">v1.0 Release <a class="header-anchor" href="#v1-0-release" aria-label="Permalink to “v1.0 Release”">​</a></h2><p>For <code>tsgolint</code> v1.0, we will address:</p><ul><li>performance issue for large monorepos</li><li>be able to configure individual rules</li><li>correctness of each individual rules</li><li>IDE support</li><li>overall stability</li></ul><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">​</a></h2><p>We&#39;d like to extend our gratitude to:</p><ul><li>The TypeScript team for creating <code>typescript-go</code>.</li><li>The <code>typescript-eslint</code> team for their heartwarming support.</li><li><a href="https://github.com/auvred" target="_blank" rel="noreferrer">@auvred</a> for creating <code>tsgolint</code>.</li><li><a href="https://github.com/camchenry" target="_blank" rel="noreferrer">@camchenry</a> for the <code>oxlint</code> + <code>tsgolint</code> integration.</li><li><a href="https://github.com/camc314" target="_blank" rel="noreferrer">@camc314</a> for work on performance issues.</li></ul><h2 id="join-the-community" tabindex="-1">Join the Community <a class="header-anchor" href="#join-the-community" aria-label="Permalink to “Join the Community”">​</a></h2><p>We&#39;d love to hear your feedback on <code>oxlint</code> and type-aware linting and are excited to see how it helps improve your development workflow.</p><p>Connect with us:</p><ul><li><strong>Discord</strong>: Join our <a href="https://discord.gg/9uXCAwqQZW" target="_blank" rel="noreferrer">community server</a> for real-time discussions</li><li><strong>GitHub</strong>: Share feedback on <a href="https://github.com/oxc-project/oxc/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a></li><li><strong>Issues</strong>: Report <code>oxlint</code> bugs to <a href="https://github.com/oxc-project/oxc/issues" target="_blank" rel="noreferrer">oxc</a> and type-aware linting bugs to <a href="https://github.com/oxc-project/tsgolint/issues" target="_blank" rel="noreferrer">tsgolint</a>.</li></ul><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to “Next steps”">​</a></h2><p>Install <code>oxlint</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # generate .oxlintrc.json</span></span></code></pre></div><p>or follow the <a href="https://oxc.rs/docs/guide/usage/linter" target="_blank" rel="noreferrer">installation guide</a>.</p><p>Use the <code>--type-aware</code> CLI flag.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type-aware</span></span></code></pre></div><p>And play around with any of the type-aware rules in <code>.oxlintrc.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;$schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./node_modules/oxlint/configuration_schema.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/await-thenable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-array-delete&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-base-to-string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-confusing-void-expression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-duplicate-type-constituents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-floating-promises&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-for-in-array&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-implied-eval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-meaningless-void-operator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-misused-promises&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-misused-spread&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-mixed-enums&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-redundant-type-constituents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unnecessary-boolean-literal-compare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unnecessary-template-expression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unnecessary-type-arguments&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unnecessary-type-assertion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-argument&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-assignment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-call&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-enum-comparison&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-member-access&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-return&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-type-assertion&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/no-unsafe-unary-minus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/non-nullable-type-assertion-style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/only-throw-error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/prefer-promise-reject-errors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/prefer-reduce-type-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/prefer-return-this-type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/promise-function-async&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/related-getter-setter-pairs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/require-array-sort-compare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/require-await&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/restrict-plus-operands&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/restrict-template-expressions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/return-await&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/switch-exhaustiveness-check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/unbound-method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;typescript/use-unknown-in-catch-callback-variable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,79)])}var l=a(s,[[`render`,c]]);export{o as __pageData,l as default};