import{M as e,O as t,h as n,p as r,u as i}from"./chunks/runtime-core.esm-bundler.C80uTydv.js";import{t as a}from"./chunks/plugin-vue_export-helper.DTeiOEMk.js";const o=JSON.parse(`{"title":"Oxc Transformer Alpha","description":"","frontmatter":{"title":"Oxc Transformer Alpha","outline":"deep","authors":["boshen","Dunqing","overlookmotel"],"head":[["meta",{"property":"og:title","content":"Oxc Transformer Alpha"}],["meta",{"name":"twitter:title","content":"Oxc Transformer Alpha"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/blog/2024-09-29-transformer-alpha.html"}]]},"headers":[],"relativePath":"blog/2024-09-29-transformer-alpha.md","filePath":"blog/2024-09-29-transformer-alpha.md"}`);var s={name:`blog/2024-09-29-transformer-alpha.md`};function c(a,o,s,c,l,u){let d=e(`AppBlogPostHeader`);return t(),i(`div`,null,[n(d),o[0]||=r(`<br><p>We are excited to announce an alpha release for Oxc transform (a.k.a transpile).</p><p>This release contains three major features:</p><ol><li>Transforming TypeScript to ESNext.</li><li>Transforming React JSX to ESNext, with built-in React Refresh.</li><li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#isolated-declarations" target="_blank" rel="noreferrer">TypeScript Isolated Declarations DTS Emit</a> without using the TypeScript compiler.</li></ol><p>In this alpha stage, we recommend to experiment with these features to speed up build times.</p><p><a href="https://github.com/oxc-project/bench-transformer" target="_blank" rel="noreferrer">Our benchmark</a> shows:</p><ul><li>Transform: Oxc is 3x - 5x faster than SWC, uses 20% less memory, and has smaller package size (2 MB vs SWC&#39;s 37 MB).</li><li>Transform: Oxc is 20x - 50x faster than Babel, uses 70% less memory, and is 19 MB smaller, with only 2 npm packages to install vs Babel&#39;s 170.</li><li>React development + React Refresh: Oxc is 5x faster than SWC, 50x faster than Babel.</li><li>TS isolated declarations <code>.d.ts</code> emit: Oxc is 40x faster than TSC on typical files, 20x faster on larger files.</li></ul><h2 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to “Usage Examples”">​</a></h2><h3 id="oxc-transform-npm-package" tabindex="-1"><a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer"><code>oxc-transform</code></a> npm package <a class="header-anchor" href="#oxc-transform-npm-package" aria-label="Permalink to “oxc-transform npm package”">​</a></h3><p>Vue.js is currently <a href="https://github.com/vuejs/core/blob/0895b2624b707ea1e75c41f2e1f75388e7a6f101/scripts/build-types.js#L20" target="_blank" rel="noreferrer">experimenting</a> the <a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer"><code>oxc-transform</code></a> npm package for isolated declarations in its build pipeline:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isolatedDeclaration } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isolatedDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, ts);</span></span></code></pre></div><p><a href="https://github.com/lukeed" target="_blank" rel="noreferrer">@lukeed</a> and <a href="https://github.com/maraisr" target="_blank" rel="noreferrer">@maraisr</a> are utilizing <code>oxc-transform</code> for their packages <a href="https://github.com/lukeed/empathic" target="_blank" rel="noreferrer"><code>empathic</code></a> and <a href="https://github.com/maraisr/dldr" target="_blank" rel="noreferrer"><code>dldr</code></a> to transform and generate <code>.d.ts</code> <a href="https://github.com/lukeed/empathic/blob/b83a360ff55051590dec19aa913cd12da97fa3f8/scripts/build.ts#L45-L52" target="_blank" rel="noreferrer">in a single step</a>.</p><p>The following example demonstrates emitting <code>.js</code> and <code>.d.ts</code> in a single transformation step:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transformed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filePath, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  typescript: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    onlyRemoveTypeImports: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    declaration: { stripInternal: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, transformed.code);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, transformed.declaration);</span></span></code></pre></div><h3 id="unplugin-isolated-decl" tabindex="-1"><a href="https://github.com/unplugin/unplugin-isolated-decl" target="_blank" rel="noreferrer"><code>unplugin-isolated-decl</code></a> <a class="header-anchor" href="#unplugin-isolated-decl" aria-label="Permalink to “unplugin-isolated-decl”">​</a></h3><p><code>vue-macros</code> <a href="https://github.com/vue-macros/vue-macros/blob/4247c7ba9189c630111e058245ce1412c8da9229/tsup.config.ts#L10" target="_blank" rel="noreferrer">uses</a> <code>unplugin-isolated-decl</code> as the integration tool for its esbuild plugin.</p><p><a href="https://github.com/sxzz" target="_blank" rel="noreferrer">@sxzz</a> <a href="https://x.com/sanxiaozhizi/status/1821320327231893600" target="_blank" rel="noreferrer">reports</a> their <code>.d.ts</code> generation time is reduced from 76s to 16s.</p><h3 id="bazel-build-at-airtable" tabindex="-1">Bazel build at <a href="https://github.com/Airtable" target="_blank" rel="noreferrer">Airtable</a> <a class="header-anchor" href="#bazel-build-at-airtable" aria-label="Permalink to “Bazel build at Airtable”">​</a></h3><p><a href="https://github.com/MichaelMitchell-at" target="_blank" rel="noreferrer">@michaelm</a> from <a href="https://github.com/Airtable" target="_blank" rel="noreferrer">Airtable</a> is integrating Oxc&#39;s isolated declarations <code>.d.ts</code> emit in their CI pipeline within their <a href="https://github.com/aspect-build/rules_ts/pull/697" target="_blank" rel="noreferrer">Bazel build</a>.</p><h3 id="rust-oxc-transformer-crate" tabindex="-1">Rust <a href="https://crates.io/crates/oxc_transformer" target="_blank" rel="noreferrer"><code>oxc_transformer</code></a> crate <a class="header-anchor" href="#rust-oxc-transformer-crate" aria-label="Permalink to “Rust oxc_transformer crate”">​</a></h3><p>The <a href="https://rolldown.rs" target="_blank" rel="noreferrer">Rolldown</a> bundler uses the <code>oxc_transformer</code> Rust crate <a href="https://github.com/rolldown/rolldown/blob/3213e8fdb9e25f29295b6ec0d92fcc2ce03ce396/crates/rolldown/src/utils/pre_process_ecma_ast.rs#L67-L75" target="_blank" rel="noreferrer">directly</a>.</p><h2 id="benchmark-results" tabindex="-1">Benchmark Results <a class="header-anchor" href="#benchmark-results" aria-label="Permalink to “Benchmark Results”">​</a></h2><p>The benchmark setup is located at <a href="https://github.com/oxc-project/bench-transformer" target="_blank" rel="noreferrer">oxc-project/bench-transformer</a> and the benchmarks are shown in its <a href="https://github.com/oxc-project/bench-transformer/actions/workflows/ci.yml" target="_blank" rel="noreferrer">GitHub Actions</a>.</p><p>(Corrections are welcome for any misconfigurations.)</p><p>On <code>ubuntu-latest</code>, an example of different lines of code are measured:</p><h3 id="transform" tabindex="-1">Transform <a class="header-anchor" href="#transform" aria-label="Permalink to “Transform”">​</a></h3><table tabindex="0"><thead><tr><th>Lines</th><th>oxc</th><th>swc</th><th>babel</th></tr></thead><tbody><tr><td>~100</td><td>0.14 ms</td><td>0.7 ms (5x)</td><td>11.5 ms (82x)</td></tr><tr><td>~1000</td><td>0.9 ms</td><td>5.7 ms (6.3x)</td><td>38.7 ms (43x)</td></tr><tr><td>~10000</td><td>14.9 ms</td><td>35.9 ms(2.4x)</td><td>492 ms (33x)</td></tr></tbody></table><h3 id="isolated-declarations" tabindex="-1">Isolated Declarations <a class="header-anchor" href="#isolated-declarations" aria-label="Permalink to “Isolated Declarations”">​</a></h3><table tabindex="0"><thead><tr><th>Lines</th><th>oxc</th><th>tsc</th></tr></thead><tbody><tr><td>~100</td><td>0.1 ms</td><td>23.1 ms (231x)</td></tr><tr><td>~1000</td><td>3.1 ms</td><td>26.8 ms (8.6x)</td></tr><tr><td>~10000</td><td>3.5 ms</td><td>115.2 ms (33x)</td></tr></tbody></table><h2 id="package-size" tabindex="-1">Package size <a class="header-anchor" href="#package-size" aria-label="Permalink to “Package size”">​</a></h2><p>Oxc downloads only 2 npm packages, a total of 2 MB.</p><table tabindex="0"><thead><tr><th>Package</th><th>Size</th></tr></thead><tbody><tr><td><code>@oxc-transform/binding-darwin-arm64</code></td><td><a href="https://www.npmjs.com/package/@oxc-transform/binding-darwin-arm64" target="_blank" rel="noreferrer">2.0 MB</a></td></tr><tr><td><code>@swc/core-darwin-arm64</code></td><td><a href="https://www.npmjs.com/package/@swc/core-darwin-arm64" target="_blank" rel="noreferrer">37.5 MB</a></td></tr><tr><td><code>@babel/core</code> + <code>@babel/preset-env</code> + <code>@babel/preset-react</code> + <code>@babel/preset-typescript</code></td><td><a href="https://www.npmjs.com/package/@oxc-transform/binding-darwin-arm64" target="_blank" rel="noreferrer">21 MB and 170 packages</a></td></tr></tbody></table><h2 id="memory-usage" tabindex="-1">Memory Usage <a class="header-anchor" href="#memory-usage" aria-label="Permalink to “Memory Usage”">​</a></h2><p>Oxc uses less memory.</p><p>Memory usage transforming <code>parser.ts</code> (10777 lines) - measured using <code>/usr/bin/time -alh node</code>:</p><table tabindex="0"><thead><tr><th></th><th>Max RSS</th></tr></thead><tbody><tr><td>oxc</td><td>51 MB</td></tr><tr><td>swc</td><td>67 MB</td></tr><tr><td>babel</td><td>172 MB</td></tr></tbody></table><h2 id="next-release" tabindex="-1">Next Release <a class="header-anchor" href="#next-release" aria-label="Permalink to “Next Release”">​</a></h2><p>Our next release will include target lowering to ES6 and <code>@babel/plugin-transform-modules-commonjs</code>.</p><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">​</a></h2><p>Thank you <a href="https://github.com/dunqing" target="_blank" rel="noreferrer">@Dunqing</a> and <a href="https://github.com/overlookmotel" target="_blank" rel="noreferrer">@overlookmotel</a> for all the hard work involved in this release.</p><p>Thank you <a href="https://snyder.tech" target="_blank" rel="noreferrer">snyder.tech</a>, <a href="https://schoolhouse.world" target="_blank" rel="noreferrer">schoolhouse.world</a>, <a href="https://github.com/lukeed" target="_blank" rel="noreferrer">@lukeed</a> and <a href="https://github.com/maraisr" target="_blank" rel="noreferrer">@maraisr</a> for the generous <a href="https://github.com/sponsors/boshen" target="_blank" rel="noreferrer">sponsorship</a>.</p>`,41)])}var l=a(s,[[`render`,c]]);export{o as __pageData,l as default};