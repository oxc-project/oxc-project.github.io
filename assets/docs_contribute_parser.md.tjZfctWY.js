import{O as e,p as t,u as n}from"./chunks/runtime-core.esm-bundler.DUsM2pzQ.js";import{t as r}from"./chunks/plugin-vue_export-helper.DbjsT2lH.js";const i=JSON.parse(`{"title":"Parser","description":"","frontmatter":{"title":"Parser","outline":"deep","head":[["meta",{"property":"og:title","content":"Parser"}],["meta",{"name":"twitter:title","content":"Parser"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/contribute/parser.html"}]]},"headers":[],"relativePath":"docs/contribute/parser.md","filePath":"docs/contribute/parser.md"}`);var a={name:`docs/contribute/parser.md`};function o(r,i,a,o,s,c){return e(),n(`div`,null,[...i[0]||=[t(`<h1 id="parser" tabindex="-1">Parser <a class="header-anchor" href="#parser" aria-label="Permalink to “Parser”">​</a></h1><p>The Oxc parser is designed to be the fastest and most conformant JavaScript and TypeScript parser available. Contributing to the parser requires understanding both the implementation details and the extensive test infrastructure.</p><h2 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to “Architecture Overview”">​</a></h2><p>The parser follows a traditional compiler frontend architecture:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Source Text → Lexer → Tokens → Parser → AST</span></span></code></pre></div><h3 id="key-components" tabindex="-1">Key Components <a class="header-anchor" href="#key-components" aria-label="Permalink to “Key Components”">​</a></h3><ul><li><strong>Lexer</strong>: Tokenizes source text into structured tokens</li><li><strong>Parser</strong>: Recursive descent parser that builds the AST</li><li><strong>AST</strong>: Memory-efficient abstract syntax tree</li><li><strong>Error Recovery</strong>: Advanced error handling and recovery</li><li><strong>Semantic Analysis</strong>: Symbol resolution and scope management</li></ul><h3 id="design-goals" tabindex="-1">Design Goals <a class="header-anchor" href="#design-goals" aria-label="Permalink to “Design Goals”">​</a></h3><p>We aim to be the fastest Rust-based ready-for-production parser with:</p><ul><li><strong>Speed</strong>: 3x faster than SWC, 5x faster than Biome</li><li><strong>Conformance</strong>: 100% Test262 compliance, 99%+ Babel/TypeScript compatibility</li><li><strong>Memory Efficiency</strong>: Arena-based allocation, minimal heap usage</li><li><strong>Error Quality</strong>: Helpful error messages with recovery</li></ul><h2 id="development-workflow" tabindex="-1">Development Workflow <a class="header-anchor" href="#development-workflow" aria-label="Permalink to “Development Workflow”">​</a></h2><h3 id="setting-up" tabindex="-1">Setting Up <a class="header-anchor" href="#setting-up" aria-label="Permalink to “Setting Up”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run parser tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxc_parser</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run conformance tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # or \`just coverage\`</span></span></code></pre></div><h3 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to “Project Structure”">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>crates/oxc_parser/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── lib.rs              # Public API</span></span>
<span class="line"><span>│   ├── lexer/              # Tokenization</span></span>
<span class="line"><span>│   ├── parser/             # Parsing logic</span></span>
<span class="line"><span>│   ├── cursor.rs           # Token stream management</span></span>
<span class="line"><span>│   └── diagnostics.rs      # Error handling</span></span>
<span class="line"><span>├── tests/                  # Unit tests</span></span>
<span class="line"><span>└── examples/               # Usage examples</span></span></code></pre></div><h3 id="core-parser-files" tabindex="-1">Core Parser Files <a class="header-anchor" href="#core-parser-files" aria-label="Permalink to “Core Parser Files”">​</a></h3><ul><li><strong><code>parser/mod.rs</code></strong>: Main parser entry point</li><li><strong><code>parser/statement.rs</code></strong>: Statement parsing</li><li><strong><code>parser/expression.rs</code></strong>: Expression parsing</li><li><strong><code>parser/typescript.rs</code></strong>: TypeScript-specific parsing</li><li><strong><code>parser/jsx.rs</code></strong>: JSX parsing logic</li></ul><h2 id="conformance-testing" tabindex="-1">Conformance Testing <a class="header-anchor" href="#conformance-testing" aria-label="Permalink to “Conformance Testing”">​</a></h2><h3 id="running-conformance-tests" tabindex="-1">Running Conformance Tests <a class="header-anchor" href="#running-conformance-tests" aria-label="Permalink to “Running Conformance Tests”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span></span></code></pre></div><p>This runs conformance test suites using the runner in <a href="https://github.com/oxc-project/oxc/tree/main/tasks/coverage" target="_blank" rel="noreferrer">tasks/coverage</a>:</p><h3 id="test262-ecmascript-conformance" tabindex="-1">Test262 - ECMAScript Conformance <a class="header-anchor" href="#test262-ecmascript-conformance" aria-label="Permalink to “Test262 - ECMAScript Conformance”">​</a></h3><p>JavaScript has the <a href="https://github.com/tc39/test262" target="_blank" rel="noreferrer">ECMAScript Test Suite</a> called Test262. The goal of Test262 is to provide test material that covers every observable behavior specified in the specification.</p><p>Parser conformance uses the <a href="https://github.com/tc39/test262/blob/main/INTERPRETING.md#negative" target="_blank" rel="noreferrer">parse phase tests</a>.</p><p><strong>Current Status</strong>: <code>43765/43765 (100.00%)</code></p><h3 id="babel-parser-tests" tabindex="-1">Babel Parser Tests <a class="header-anchor" href="#babel-parser-tests" aria-label="Permalink to “Babel Parser Tests”">​</a></h3><p>When new language features are added to JavaScript, Babel implements them first. Babel has comprehensive <a href="https://github.com/babel/babel/tree/main/packages/babel-parser/test" target="_blank" rel="noreferrer">parser tests</a> for cutting-edge features.</p><p><strong>Current Status</strong>: <code>2093/2101 (99.62%)</code></p><h3 id="typescript-conformance" tabindex="-1">TypeScript Conformance <a class="header-anchor" href="#typescript-conformance" aria-label="Permalink to “TypeScript Conformance”">​</a></h3><p>The TypeScript conformance tests can be found <a href="https://github.com/microsoft/TypeScript/tree/main/tests/cases/conformance" target="_blank" rel="noreferrer">here</a>.</p><p><strong>Current Status</strong>: <code>6470/6479 (99.86%)</code></p><h3 id="viewing-results" tabindex="-1">Viewing Results <a class="header-anchor" href="#viewing-results" aria-label="Permalink to “Viewing Results”">​</a></h3><p>Test results are stored in snapshot files for tracking changes:</p><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/tasks/coverage/snapshots/parser_test262.snap" target="_blank" rel="noreferrer"><code>parser_test262.snap</code></a></li><li><a href="https://github.com/oxc-project/oxc/blob/main/tasks/coverage/snapshots/parser_babel.snap" target="_blank" rel="noreferrer"><code>parser_babel.snap</code></a></li><li><a href="https://github.com/oxc-project/oxc/blob/main/tasks/coverage/snapshots/parser_typescript.snap" target="_blank" rel="noreferrer"><code>parser_typescript.snap</code></a></li></ul>`,34)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};