import{M as e,O as t,h as n,m as r,p as i,s as a,u as o}from"./chunks/runtime-core.esm-bundler.DoAIpvg0.js";import{t as s}from"./chunks/version.data.C4jrnMtZ.js";var c={id:`eslint-no-param-reassign`,tabindex:`-1`};const l=JSON.parse(`{"title":"eslint/no-param-reassign","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"eslint/no-param-reassign"}],["meta",{"name":"twitter:title","content":"eslint/no-param-reassign"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-param-reassign.html"}]]},"headers":[],"relativePath":"docs/guide/usage/linter/rules/eslint/no-param-reassign.md","filePath":"docs/guide/usage/linter/rules/eslint/no-param-reassign.md"}`);var u=Object.assign({name:`docs/guide/usage/linter/rules/eslint/no-param-reassign.md`},{setup(l){let u=`https://github.com/oxc-project/oxc/blob/${s}/crates/oxc_linter/src/rules/eslint/no_param_reassign.rs`;return(s,l)=>{let d=e(`Badge`);return t(),o(`div`,null,[a(`h1`,c,[l[0]||=r(`eslint/no-param-reassign `,-1),n(d,{type:`info`,text:`Restriction`}),l[1]||=r(),l[2]||=a(`a`,{class:`header-anchor`,href:`#eslint-no-param-reassign`,"aria-label":`Permalink to “eslint/no-param-reassign”`},`​`,-1)]),l[3]||=i(`<div class="rule-meta"></div><h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to “What it does”">​</a></h3><p>Disallow reassigning function parameters or, optionally, their properties.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to “Why is this bad?”">​</a></h3><p>Reassigning parameters can lead to unexpected behavior, especially when relying on the original arguments passed into the function. Mutating parameter properties can be similarly surprising and harder to reason about.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to “Examples”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">qux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  qux.prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when \`props\` option is enabled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to “Configuration”">​</a></h2><p>This rule accepts a configuration object with the following properties:</p><h3 id="ignorepropertymodificationsfor" tabindex="-1">ignorePropertyModificationsFor <a class="header-anchor" href="#ignorepropertymodificationsfor" aria-label="Permalink to “ignorePropertyModificationsFor”">​</a></h3><p>type: <code>string[]</code></p><p>default: <code>[]</code></p><p>An array of parameter names whose property modifications should be ignored.</p><h3 id="ignorepropertymodificationsforregex" tabindex="-1">ignorePropertyModificationsForRegex <a class="header-anchor" href="#ignorepropertymodificationsforregex" aria-label="Permalink to “ignorePropertyModificationsForRegex”">​</a></h3><p>type: <code>string[]</code></p><p>An array of regex patterns (as strings) for parameter names whose property modifications should be ignored. Note that this uses <a href="https://docs.rs/regex/latest/regex/" target="_blank" rel="noreferrer">Rust regex syntax</a> and so may not have all features available to JavaScript regexes.</p><h3 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to “props”">​</a></h3><p>type: <code>boolean</code></p><p>default: <code>false</code></p><p>When true, also check for modifications to properties of parameters.</p><h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to “How to use”">​</a></h2><p>To <strong>enable</strong> this rule in the CLI or using the config file, you can use:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-67" id="tab-68" checked><label data-title="CLI" for="tab-68">CLI</label><input type="radio" name="group-67" id="tab-69"><label data-title="Config (.oxlintrc.json)" for="tab-69">Config (.oxlintrc.json)</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --deny</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no-param-reassign</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;no-param-reassign&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2>`,24),a(`ul`,null,[a(`li`,null,[a(`a`,{href:u,target:`_blank`,rel:`noreferrer`},`Rule Source`)])])])}}});export{l as __pageData,u as default};