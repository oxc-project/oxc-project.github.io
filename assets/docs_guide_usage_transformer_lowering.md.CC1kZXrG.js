import{O as e,p as t,u as n}from"./chunks/runtime-core.esm-bundler.C80uTydv.js";import{t as r}from"./chunks/plugin-vue_export-helper.DTeiOEMk.js";const i=JSON.parse(`{"title":"Syntax Lowering","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Syntax Lowering"}],["meta",{"name":"twitter:title","content":"Syntax Lowering"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/guide/usage/transformer/lowering.html"}]]},"headers":[],"relativePath":"docs/guide/usage/transformer/lowering.md","filePath":"docs/guide/usage/transformer/lowering.md"}`);var a={name:`docs/guide/usage/transformer/lowering.md`};function o(r,i,a,o,s,c){return e(),n(`div`,null,[...i[0]||=[t(`<h1 id="syntax-lowering" tabindex="-1">Syntax Lowering <a class="header-anchor" href="#syntax-lowering" aria-label="Permalink to “Syntax Lowering”">​</a></h1><p>Oxc transformer supports lowering ESNext to ES2015 syntax.</p><h2 id="target" tabindex="-1">Target <a class="header-anchor" href="#target" aria-label="Permalink to “Target”">​</a></h2><p>Oxc transformer receives a <code>target</code> option to specify the target runtime. This will determine which syntaxes are lowered and which warnings are emitted.</p><p>Each target environment is an environment name followed by a version number. The following environment names are currently supported:</p><ul><li><code>chrome</code></li><li><code>deno</code></li><li><code>edge</code></li><li><code>firefox</code></li><li><code>hermes</code></li><li><code>ie</code></li><li><code>ios</code></li><li><code>node</code></li><li><code>opera</code></li><li><code>rhino</code></li><li><code>safari</code></li><li><code>samsung</code></li><li><code>es</code></li></ul><p>The values that are supported by <a href="https://esbuild.github.io/api/#target" target="_blank" rel="noreferrer">esbuild&#39;s target option</a> are supported.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lib.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;const foo = a ?? b;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chrome87&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2022&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="transformations" tabindex="-1">Transformations <a class="header-anchor" href="#transformations" aria-label="Permalink to “Transformations”">​</a></h2><p>Oxc supports lowering the syntaxes below. Note that RegExp related transformations only transforms the RegExp literal (<code>/foo/v</code>) to use a RegExp constructor (<code>new RegExp(&#39;foo&#39;, &#39;v&#39;)</code>). You will need to use a polyfill together to support older browsers.</p><h3 id="es2026" tabindex="-1">ES2026 <a class="header-anchor" href="#es2026" aria-label="Permalink to “ES2026”">​</a></h3><ul><li>Explicit Resource Management (<code>using a = foo()</code>)</li></ul><h3 id="es2024" tabindex="-1">ES2024 <a class="header-anchor" href="#es2024" aria-label="Permalink to “ES2024”">​</a></h3><ul><li>RegExp v flag with set notation + properties of strings (<code>/\\p{Emoji}--\\p{ASCII}/v</code>)</li></ul><h3 id="es2022" tabindex="-1">ES2022 <a class="header-anchor" href="#es2022" aria-label="Permalink to “ES2022”">​</a></h3><ul><li>Class Static Block (<code>class A { static { foo() } }</code>)</li><li>Class Fields (<code>class A { foo = 1; #bar = 2; static baz = 3; static qux = 4; foobar(a) { return #bar in a } }</code>)</li><li>RegExp Match Indices (<code>/foo/d</code>)</li></ul><h3 id="es2021" tabindex="-1">ES2021 <a class="header-anchor" href="#es2021" aria-label="Permalink to “ES2021”">​</a></h3><ul><li>Logical Assignment Operators (<code>foo ||= bar</code>)</li><li>Numeric separators (Note: this is not implemented as a transform, but the codegen always removes the separators)</li></ul><h3 id="es2020" tabindex="-1">ES2020 <a class="header-anchor" href="#es2020" aria-label="Permalink to “ES2020”">​</a></h3><ul><li>Nullish coalescing operator (<code>foo ?? bar</code>)</li><li>Optional Chaining (<code>foo?.bar</code>)</li><li>Export namespace from (<code>export * as foo from &quot;bar&quot;</code>)</li></ul><h3 id="es2019" tabindex="-1">ES2019 <a class="header-anchor" href="#es2019" aria-label="Permalink to “ES2019”">​</a></h3><ul><li>Optional <code>catch</code> binding (<code>try {} catch {}</code>)</li></ul><h3 id="es2018" tabindex="-1">ES2018 <a class="header-anchor" href="#es2018" aria-label="Permalink to “ES2018”">​</a></h3><ul><li>Rest/Spread Properties (<code>const foo = { a, b, ...c }</code>, <code>const { x, y, ...z } = foo;</code>)</li><li>Asynchronous Iteration (<code>for await (const x of y) {}</code>, <code>async function* foo() {}</code>)</li><li>RegExp Unicode Property Escapes (<code>/\\p{Script=Greek}/u</code>)</li><li>RegExp Lookbehind Assertions (<code>/(?&lt;=foo)bar/</code>)</li><li>RegExp named capture groups (<code>/(?&lt;foo&gt;bar)/</code>)</li><li><code>s</code> (<code>dotAll</code>) flag for regular expressions (<code>/foo./s</code>)</li></ul><h3 id="es2017" tabindex="-1">ES2017 <a class="header-anchor" href="#es2017" aria-label="Permalink to “ES2017”">​</a></h3><ul><li>Async functions (<code>async function foo() {}</code>)</li></ul><h3 id="es2016" tabindex="-1">ES2016 <a class="header-anchor" href="#es2016" aria-label="Permalink to “ES2016”">​</a></h3><ul><li>Exponentiation operator (<code>foo ** bar</code>)</li></ul><h3 id="es2015" tabindex="-1">ES2015 <a class="header-anchor" href="#es2015" aria-label="Permalink to “ES2015”">​</a></h3><ul><li>Arrow functions (<code>const foo = () =&gt; {}</code>)</li><li>RegExp sticky flag (<code>/foo/y</code>)</li><li>RegExp unicode flag (<code>/foo/u</code>)</li></ul><h2 id="warnings" tabindex="-1">Warnings <a class="header-anchor" href="#warnings" aria-label="Permalink to “Warnings”">​</a></h2><p>Oxc transformer emits warnings for the syntaxes below if the target runtime does not support them.</p><h3 id="es2020-1" tabindex="-1">ES2020 <a class="header-anchor" href="#es2020-1" aria-label="Permalink to “ES2020”">​</a></h3><ul><li>BigInt (<code>1n</code>)</li></ul><h2 id="compiler-assumptions" tabindex="-1">Compiler assumptions <a class="header-anchor" href="#compiler-assumptions" aria-label="Permalink to “Compiler assumptions”">​</a></h2><p>You can specify assumptions for the compiler to make the output more smaller.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lib.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;const foo = a ?? b;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chrome87&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2022&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assumptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    noDocumentAll: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>The following assumptions are supported.</p><h3 id="nodocumentall" tabindex="-1"><code>noDocumentAll</code> <a class="header-anchor" href="#nodocumentall" aria-label="Permalink to “noDocumentAll”">​</a></h3><p>Assume that the deprecated <code>document.all</code> with its special behavior is not used.</p><h3 id="puregetters" tabindex="-1"><code>pureGetters</code> <a class="header-anchor" href="#puregetters" aria-label="Permalink to “pureGetters”">​</a></h3><p>Assume that getters does not have side effects.</p><h3 id="setpublicclassfields" tabindex="-1"><code>setPublicClassFields</code> <a class="header-anchor" href="#setpublicclassfields" aria-label="Permalink to “setPublicClassFields”">​</a></h3><p>When using public class fields, assume that they don&#39;t shadow any getter in the current class, in its subclasses or in its superclass. Thus, it&#39;s safe to assign them rather than using <code>Object.defineProperty</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>For TypeScript, if you wanted behavior is equivalent to <code>useDefineForClassFields: false</code>, you should set both <code>setPublicClassFields</code> and <code>removeClassFieldsWithoutInitializer</code> to <code>true</code>. See <a href="./typescript.html#usedefineforclassfields">the TypeScript page</a> for more information.</p></div><h2 id="not-supported-syntaxes" tabindex="-1">Not supported syntaxes <a class="header-anchor" href="#not-supported-syntaxes" aria-label="Permalink to “Not supported syntaxes”">​</a></h2><p>The following syntaxes are not lowered by Oxc transformer.</p><ul><li>ESNext <ul><li>Decorators (tracked at <a href="https://github.com/oxc-project/oxc/issues/9170" target="_blank" rel="noreferrer">#9170</a>) (Note that <a href="./typescript.html#decorators">experimental decorators in TypeScript are supported</a>)</li></ul></li><li>ES2025 <ul><li>RegExp Modifiers (tracked at <a href="https://github.com/oxc-project/oxc/issues/11826" target="_blank" rel="noreferrer">#11826</a>)</li><li>Duplicate named capture groups (tracked at <a href="https://github.com/oxc-project/oxc/issues/11827" target="_blank" rel="noreferrer">#11827</a>)</li></ul></li></ul>`,48)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};