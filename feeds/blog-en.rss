<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>The Oxidation Compiler Blog</title>
        <link>https://oxc.rs</link>
        <description>undefined</description>
        <lastBuildDate>Thu, 30 Oct 2025 15:09:57 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright © 2023-present VoidZero Inc.</copyright>
        <item>
            <title><![CDATA[Oxlint General Availability]]></title>
            <link>https://oxc.rs/blog/2023-12-12-announcing-oxlint</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2023-12-12-announcing-oxlint</guid>
            <pubDate>Tue, 12 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><p>We are thrilled to announce that oxlint is now generally available!
This milestone signifies our team's ability to promptly address and triage issues.</p>
<p>Oxlint is a JavaScript linter designed to catch erroneous or useless code without requiring any configurations by default.</p>
<h2 id="how-to-use" tabindex="-1">How to Use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to “How to Use”">&#8203;</a></h2>
<p>At this stage, oxlint is <strong>not intended to fully replace ESLint</strong>; it serves as an enhancement when ESLint's slowness becomes a bottleneck in your workflow.</p>
<p>For faster feedback loops, we recommend running oxlint before ESLint in your lint-staged or CI setup, considering it only takes a few seconds to run on large codebases.</p>
<p>To test oxlint in your JavaScript / TypeScript codebase, simply execute the following command at the root directory of your repository:</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-20" id="tab-21" checked><label data-title="npm" for="tab-21">npm</label><input type="radio" name="group-20" id="tab-22" ><label data-title="pnpm" for="tab-22">pnpm</label><input type="radio" name="group-20" id="tab-23" ><label data-title="yarn" for="tab-23">yarn</label><input type="radio" name="group-20" id="tab-24" ><label data-title="bun" for="tab-24">bun</label><input type="radio" name="group-20" id="tab-25" ><label data-title="deno" for="tab-25">deno</label></div><div class="blocks">
<div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> bunx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npm:oxlint@latest</span></span></code></pre>
</div></div></div>
<p>Alternatively, refer to the <a href="/docs/guide/usage/linter.html">installation guide</a> for detailed instructions.</p>
<h2 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-label="Permalink to “Design”">&#8203;</a></h2>
<h3 id="_50-100-times-faster-than-eslint" tabindex="-1">50-100 Times Faster than ESLint <a class="header-anchor" href="#_50-100-times-faster-than-eslint" aria-label="Permalink to “50-100 Times Faster than ESLint”">&#8203;</a></h3>
<p>In real-world scenarios, Shopify reported that their 75 CI minutes ESLint run is now only 10 seconds.</p>
<p>From Jason Miller, Shopify DX and creator of Preact:</p>
<blockquote>
<p>oxlint has been a massive win for us at Shopify. Our previous linting setup took 75 minutes to run, so we were fanning it out across 40+ workers in CI.</p>
<p>By comparison, oxlint takes around 10 seconds to lint the same codebase on a single worker, and the output is easier to interpret.</p>
<p>We even caught a few bugs that were hidden or skipped by our old setup when we migrated!</p>
</blockquote>
<p>The majority of the performance gains stem from Oxlint being purposefully designed for performance, utilizing Rust and parallel processing as key factors.</p>
<h3 id="lint-for-correctness" tabindex="-1">Lint for Correctness <a class="header-anchor" href="#lint-for-correctness" aria-label="Permalink to “Lint for Correctness”">&#8203;</a></h3>
<p>Oxlint defaults to identifying erroneous, redundant, or confusing code — prioritizing correctness over unnecessary nitpicking rules (categorized as <code>perf</code>, <code>suspicious</code>, <code>pedantic</code>, or <code>style</code>), which are disabled by default.</p>
<h3 id="ease-of-use" tabindex="-1">Ease of Use <a class="header-anchor" href="#ease-of-use" aria-label="Permalink to “Ease of Use”">&#8203;</a></h3>
<p>Setting up new JavaScript / TypeScript codebases is becoming increasingly complex.
There's a high likelihood of encountering compatibility issues among your tools, potentially resulting in hours of wasted time.</p>
<p>That's why we designed oxlint to be zero-config out of the box; even Node.js is not a requirement.
Most adjustments can be made through the command-line, and reading from ESLint configuration file is currently work in progress.</p>
<h3 id="enhanced-diagnostics" tabindex="-1">Enhanced Diagnostics <a class="header-anchor" href="#enhanced-diagnostics" aria-label="Permalink to “Enhanced Diagnostics”">&#8203;</a></h3>
<p>Understanding linter messages can be challenging.
Oxlint aims to simplify this by pinpointing root causes and providing helpful messages — eliminating the need for lengthy rule documentation reading, saving valuable time.</p>
<p>Running <code>oxlint -D perf</code> in the <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">vscode repository</a>:</p>
<img width="100%" src="https://github.com/oxc-project/oxc/assets/1430279/094a3b24-0433-42ae-aad2-48a7dec2b985" >
<h3 id="consolidated-rules" tabindex="-1">Consolidated Rules <a class="header-anchor" href="#consolidated-rules" aria-label="Permalink to “Consolidated Rules”">&#8203;</a></h3>
<p>Oxlint does not provide a plugin system yet, but we are actively consolidating rules from popular plugins like TypeScript, React, Jest, Unicorn, JSX-a11y and Import.</p>
<p>We recognize the importance of plugins in the JavaScript ecosystem and are also investigating a DSL-based plugin system.</p>
<p>However, you might appreciate a standalone linter — no need to manage a list of plugin dependencies,
navigate through <a href="https://github.com/antfu/eslint-ts-patch" target="_blank" rel="noreferrer">compatibility issues</a>,
or <a href="https://github.com/import-js/eslint-plugin-import/pull/2504#issuecomment-1191057877" target="_blank" rel="noreferrer">resort to forked plugins due to version constraints</a>.</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><p>We are thrilled to announce that oxlint is now generally available!
This milestone signifies our team's ability to promptly address and triage issues.</p>
<p>Oxlint is a JavaScript linter designed to catch erroneous or useless code without requiring any configurations by default.</p>
<h2 id="how-to-use" tabindex="-1">How to Use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to “How to Use”">&#8203;</a></h2>
<p>At this stage, oxlint is <strong>not intended to fully replace ESLint</strong>; it serves as an enhancement when ESLint's slowness becomes a bottleneck in your workflow.</p>
<p>For faster feedback loops, we recommend running oxlint before ESLint in your lint-staged or CI setup, considering it only takes a few seconds to run on large codebases.</p>
<p>To test oxlint in your JavaScript / TypeScript codebase, simply execute the following command at the root directory of your repository:</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-20" id="tab-21" checked><label data-title="npm" for="tab-21">npm</label><input type="radio" name="group-20" id="tab-22" ><label data-title="pnpm" for="tab-22">pnpm</label><input type="radio" name="group-20" id="tab-23" ><label data-title="yarn" for="tab-23">yarn</label><input type="radio" name="group-20" id="tab-24" ><label data-title="bun" for="tab-24">bun</label><input type="radio" name="group-20" id="tab-25" ><label data-title="deno" for="tab-25">deno</label></div><div class="blocks">
<div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> bunx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npm:oxlint@latest</span></span></code></pre>
</div></div></div>
<p>Alternatively, refer to the <a href="/docs/guide/usage/linter.html">installation guide</a> for detailed instructions.</p>
<h2 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-label="Permalink to “Design”">&#8203;</a></h2>
<h3 id="_50-100-times-faster-than-eslint" tabindex="-1">50-100 Times Faster than ESLint <a class="header-anchor" href="#_50-100-times-faster-than-eslint" aria-label="Permalink to “50-100 Times Faster than ESLint”">&#8203;</a></h3>
<p>In real-world scenarios, Shopify reported that their 75 CI minutes ESLint run is now only 10 seconds.</p>
<p>From Jason Miller, Shopify DX and creator of Preact:</p>
<blockquote>
<p>oxlint has been a massive win for us at Shopify. Our previous linting setup took 75 minutes to run, so we were fanning it out across 40+ workers in CI.</p>
<p>By comparison, oxlint takes around 10 seconds to lint the same codebase on a single worker, and the output is easier to interpret.</p>
<p>We even caught a few bugs that were hidden or skipped by our old setup when we migrated!</p>
</blockquote>
<p>The majority of the performance gains stem from Oxlint being purposefully designed for performance, utilizing Rust and parallel processing as key factors.</p>
<h3 id="lint-for-correctness" tabindex="-1">Lint for Correctness <a class="header-anchor" href="#lint-for-correctness" aria-label="Permalink to “Lint for Correctness”">&#8203;</a></h3>
<p>Oxlint defaults to identifying erroneous, redundant, or confusing code — prioritizing correctness over unnecessary nitpicking rules (categorized as <code>perf</code>, <code>suspicious</code>, <code>pedantic</code>, or <code>style</code>), which are disabled by default.</p>
<h3 id="ease-of-use" tabindex="-1">Ease of Use <a class="header-anchor" href="#ease-of-use" aria-label="Permalink to “Ease of Use”">&#8203;</a></h3>
<p>Setting up new JavaScript / TypeScript codebases is becoming increasingly complex.
There's a high likelihood of encountering compatibility issues among your tools, potentially resulting in hours of wasted time.</p>
<p>That's why we designed oxlint to be zero-config out of the box; even Node.js is not a requirement.
Most adjustments can be made through the command-line, and reading from ESLint configuration file is currently work in progress.</p>
<h3 id="enhanced-diagnostics" tabindex="-1">Enhanced Diagnostics <a class="header-anchor" href="#enhanced-diagnostics" aria-label="Permalink to “Enhanced Diagnostics”">&#8203;</a></h3>
<p>Understanding linter messages can be challenging.
Oxlint aims to simplify this by pinpointing root causes and providing helpful messages — eliminating the need for lengthy rule documentation reading, saving valuable time.</p>
<p>Running <code>oxlint -D perf</code> in the <a href="https://github.com/microsoft/vscode" target="_blank" rel="noreferrer">vscode repository</a>:</p>
<img width="100%" src="https://github.com/oxc-project/oxc/assets/1430279/094a3b24-0433-42ae-aad2-48a7dec2b985" >
<h3 id="consolidated-rules" tabindex="-1">Consolidated Rules <a class="header-anchor" href="#consolidated-rules" aria-label="Permalink to “Consolidated Rules”">&#8203;</a></h3>
<p>Oxlint does not provide a plugin system yet, but we are actively consolidating rules from popular plugins like TypeScript, React, Jest, Unicorn, JSX-a11y and Import.</p>
<p>We recognize the importance of plugins in the JavaScript ecosystem and are also investigating a DSL-based plugin system.</p>
<p>However, you might appreciate a standalone linter — no need to manage a list of plugin dependencies,
navigate through <a href="https://github.com/antfu/eslint-ts-patch" target="_blank" rel="noreferrer">compatibility issues</a>,
or <a href="https://github.com/import-js/eslint-plugin-import/pull/2504#issuecomment-1191057877" target="_blank" rel="noreferrer">resort to forked plugins due to version constraints</a>.</p>
<hr>
<p>Happy linting and have a joyful holiday season!</p>
<p>To get started, follow the <a href="/docs/guide/usage/linter.html">installation guide</a>,
learn more about the <a href="/docs/guide/introduction.html">oxc project</a>,
or discuss on <a href="https://news.ycombinator.com/item?id=38652887" target="_blank" rel="noreferrer">Hacker News</a>.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxlint Import Plugin Alpha]]></title>
            <link>https://oxc.rs/blog/2024-05-04-import-plugin-alpha</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2024-05-04-import-plugin-alpha</guid>
            <pubDate>Sat, 04 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><p>We are excited to announce an alpha release for <code>oxlint --import-plugin</code>, a port of <a href="https://github.com/import-js/eslint-plugin-import" target="_blank" rel="noreferrer"><code>eslint-plugin-import</code></a>.</p>
<p>This port aims to resolve all known issues associated with <code>eslint-plugin-import</code>:</p>
<ul>
<li>Performance - execution time exceeding one minute when certain rules are enabled</li>
<li>Dependency size - 188 dependencies totaling 30M</li>
<li>Backwards compatibility - the necessity to <a href="https://github.com/import-js/eslint-plugin-import/pull/2447#issuecomment-1117384140" target="_blank" rel="noreferrer">support Node.js v4.0.0</a></li>
<li>Dependency compatibility - the need to replace it with <a href="https://github.com/un-ts/eslint-plugin-import-x" target="_blank" rel="noreferrer"><code>eslint-plugin-import-x</code></a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/issues/2948" target="_blank" rel="noreferrer">Upgrading to ESLint v9</a></li>
</ul>
<h2 id="what-s-in-the-release" tabindex="-1">What's in the release? <a class="header-anchor" href="#what-s-in-the-release" aria-label="Permalink to “What's in the release?”">&#8203;</a></h2>
<p>This alpha release is expected to work if your project is in ESM (ECMAScript Modules).</p>
<p>If path aliases (e.g. <code>@/foo</code>) is required through <a href="https://www.typescriptlang.org/tsconfig/#paths" target="_blank" rel="noreferrer">tsconfig.compilerOptions.paths</a>,
the <code>--tsconfig</code> option can be used:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span>npx oxlint@latest --tsconfig ./tsconfig.json --import-plugin</span></span></code></pre>
</div><p>The rules that are enabled by default via <code>npx oxlint@latest --import-plugin</code> are:</p>
<ul>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/default.md" target="_blank" rel="noreferrer">default</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/named.md" target="_blank" rel="noreferrer">named</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/namespace.md" target="_blank" rel="noreferrer">namespace</a></li>
</ul>
<p>Rules that can be enabled selectively via <code>npx oxlint@latest --import-plugin -D rule-name</code> are:</p>
<ul>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default.md" target="_blank" rel="noreferrer">no-named-as-default</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default-member.md" target="_blank" rel="noreferrer">no-named-as-default-member</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-self-import.md" target="_blank" rel="noreferrer">no-self-import</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-duplicates.md" target="_blank" rel="noreferrer">no-duplicates</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-amd.md" target="_blank" rel="noreferrer">no-amd</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-default-export.md" target="_blank" rel="noreferrer">no-default-export</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-cycle.md" target="_blank" rel="noreferrer">no-cycle</a></li>
</ul>
<p>There are also improvements to these rules; for example, the diagnostics for the <code>no-cycle</code> rule have been improved:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span> ⚠ eslint-plugin-import(no-cycle): Dependency cycle detected</span></span>
<span class="line"><span>   ╭─[apps/web/playwright/lib/fixtures.ts:13:42]</span></span>
<span class="line"><span>12 │ import { createPaymentsFixture } from "../fixtures/payments";</span></span>
<span class="line"><span>13 │ import { createBookingPageFixture } from "../fixtures/regularBookings";</span></span>
<span class="line"><span>   ·                                          ─────────────────────────────</span></span>
<span class="line"><span>14 │ import { createRoutingFormsFixture } from "../fixtures/routingForms";</span></span>
<span class="line"><span>   ╰────</span></span>
<span class="line"><span> help: These paths form a cycle:</span></span>
<span class="line"><span>       -> ../fixtures/regularBookings - apps/web/playwright/fixtures/regularBookings.ts</span></span>
<span class="line"><span>       -> ./users - apps/web/playwright/fixtures/users.ts</span></span>
<span class="line"><span>       -> ../lib/testUtils - apps/web/playwright/lib/testUtils.ts</span></span>
<span class="line"><span>       -> ./fixtures - apps/web/playwright/lib/fixtures.ts</span></span></code></pre>
</div><p>This isn't a long list of features,
but due to the complexity of the current state of the ecosystem,
it requires a lot of effort to implement these rules and ensure they work correctly.</p>
<p>Over the past six months, we have worked in our spare time and successfully completed all the prerequisites for the <code>--import-plugin</code> to work:</p>
<ul>
<li>a <a href="https://github.com/oxc-project/oxc-resolver" target="_blank" rel="noreferrer">resolver</a> for module resolution</li>
<li>a small <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/service.rs" target="_blank" rel="noreferrer">&quot;runtime&quot;</a> to maximize processing dependent files in parallel</li>
<li>a <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_syntax/src/module_record.rs" target="_blank" rel="noreferrer"><code>ModuleRecord</code></a> data structure for storing import / export information, and its respective <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_semantic/src/module_record/builder.rs" target="_blank" rel="noreferrer">builder</a></li>
</ul>
<h2 id="how-can-i-help" tabindex="-1">How can I help? <a class="header-anchor" href="#how-can-i-help" aria-label="Permalink to “How can I help?”">&#8203;</a></h2>
<p>If you are a project maintainer (a.k.a. configuration engineer) and lack the time or energy to keep ESLint and all its plugins updated,
you may follow <a href="https://github.com/brooooooklyn" target="_blank" rel="noreferrer">@brooooooklyn</a>'s lead and <a href="https://github.com/napi-rs/napi-rs/pull/2032" target="_blank" rel="noreferrer">replace ESLint with oxlint in all his projects</a>.</p>
<p>If you are an open-source enthusiast and are willing to help out, come talk to us on <a href="https://discord.gg/9uXCAwqQZW" target="_blank" rel="noreferrer">discord</a>, check out the <a href="https://github.com/oxc-project/oxc/issues/481" target="_blank" rel="noreferrer">linter product plan and progress issue</a>, or help by <a href="https://github.com/oxc-project/oxc/issues/3161" target="_blank" rel="noreferrer">proposing new rules</a> that were deferred.</p>
<p>If you are an engineering manager, or are willing to migrate your project to oxlint (with 330 rules and growing) to keep your infrastructure costs down,
you may consider <a href="https://github.com/sponsors/Boshen" target="_blank" rel="noreferrer">sponsoring</a> so we can prioritize your project.</p>
<p>Please remember <code>oxlint</code> is currently community driven, I believe that with enough resources, we can make <code>--import-plugin</code> generally available in the next few months.</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><p>We are excited to announce an alpha release for <code>oxlint --import-plugin</code>, a port of <a href="https://github.com/import-js/eslint-plugin-import" target="_blank" rel="noreferrer"><code>eslint-plugin-import</code></a>.</p>
<p>This port aims to resolve all known issues associated with <code>eslint-plugin-import</code>:</p>
<ul>
<li>Performance - execution time exceeding one minute when certain rules are enabled</li>
<li>Dependency size - 188 dependencies totaling 30M</li>
<li>Backwards compatibility - the necessity to <a href="https://github.com/import-js/eslint-plugin-import/pull/2447#issuecomment-1117384140" target="_blank" rel="noreferrer">support Node.js v4.0.0</a></li>
<li>Dependency compatibility - the need to replace it with <a href="https://github.com/un-ts/eslint-plugin-import-x" target="_blank" rel="noreferrer"><code>eslint-plugin-import-x</code></a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/issues/2948" target="_blank" rel="noreferrer">Upgrading to ESLint v9</a></li>
</ul>
<h2 id="what-s-in-the-release" tabindex="-1">What's in the release? <a class="header-anchor" href="#what-s-in-the-release" aria-label="Permalink to “What's in the release?”">&#8203;</a></h2>
<p>This alpha release is expected to work if your project is in ESM (ECMAScript Modules).</p>
<p>If path aliases (e.g. <code>@/foo</code>) is required through <a href="https://www.typescriptlang.org/tsconfig/#paths" target="_blank" rel="noreferrer">tsconfig.compilerOptions.paths</a>,
the <code>--tsconfig</code> option can be used:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span>npx oxlint@latest --tsconfig ./tsconfig.json --import-plugin</span></span></code></pre>
</div><p>The rules that are enabled by default via <code>npx oxlint@latest --import-plugin</code> are:</p>
<ul>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/default.md" target="_blank" rel="noreferrer">default</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/named.md" target="_blank" rel="noreferrer">named</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/namespace.md" target="_blank" rel="noreferrer">namespace</a></li>
</ul>
<p>Rules that can be enabled selectively via <code>npx oxlint@latest --import-plugin -D rule-name</code> are:</p>
<ul>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default.md" target="_blank" rel="noreferrer">no-named-as-default</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-named-as-default-member.md" target="_blank" rel="noreferrer">no-named-as-default-member</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-self-import.md" target="_blank" rel="noreferrer">no-self-import</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-duplicates.md" target="_blank" rel="noreferrer">no-duplicates</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-amd.md" target="_blank" rel="noreferrer">no-amd</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-default-export.md" target="_blank" rel="noreferrer">no-default-export</a></li>
<li><a href="https://github.com/import-js/eslint-plugin-import/blob/v2.29.1/docs/rules/no-cycle.md" target="_blank" rel="noreferrer">no-cycle</a></li>
</ul>
<p>There are also improvements to these rules; for example, the diagnostics for the <code>no-cycle</code> rule have been improved:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span> ⚠ eslint-plugin-import(no-cycle): Dependency cycle detected</span></span>
<span class="line"><span>   ╭─[apps/web/playwright/lib/fixtures.ts:13:42]</span></span>
<span class="line"><span>12 │ import { createPaymentsFixture } from "../fixtures/payments";</span></span>
<span class="line"><span>13 │ import { createBookingPageFixture } from "../fixtures/regularBookings";</span></span>
<span class="line"><span>   ·                                          ─────────────────────────────</span></span>
<span class="line"><span>14 │ import { createRoutingFormsFixture } from "../fixtures/routingForms";</span></span>
<span class="line"><span>   ╰────</span></span>
<span class="line"><span> help: These paths form a cycle:</span></span>
<span class="line"><span>       -> ../fixtures/regularBookings - apps/web/playwright/fixtures/regularBookings.ts</span></span>
<span class="line"><span>       -> ./users - apps/web/playwright/fixtures/users.ts</span></span>
<span class="line"><span>       -> ../lib/testUtils - apps/web/playwright/lib/testUtils.ts</span></span>
<span class="line"><span>       -> ./fixtures - apps/web/playwright/lib/fixtures.ts</span></span></code></pre>
</div><p>This isn't a long list of features,
but due to the complexity of the current state of the ecosystem,
it requires a lot of effort to implement these rules and ensure they work correctly.</p>
<p>Over the past six months, we have worked in our spare time and successfully completed all the prerequisites for the <code>--import-plugin</code> to work:</p>
<ul>
<li>a <a href="https://github.com/oxc-project/oxc-resolver" target="_blank" rel="noreferrer">resolver</a> for module resolution</li>
<li>a small <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/service.rs" target="_blank" rel="noreferrer">&quot;runtime&quot;</a> to maximize processing dependent files in parallel</li>
<li>a <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_syntax/src/module_record.rs" target="_blank" rel="noreferrer"><code>ModuleRecord</code></a> data structure for storing import / export information, and its respective <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_semantic/src/module_record/builder.rs" target="_blank" rel="noreferrer">builder</a></li>
</ul>
<h2 id="how-can-i-help" tabindex="-1">How can I help? <a class="header-anchor" href="#how-can-i-help" aria-label="Permalink to “How can I help?”">&#8203;</a></h2>
<p>If you are a project maintainer (a.k.a. configuration engineer) and lack the time or energy to keep ESLint and all its plugins updated,
you may follow <a href="https://github.com/brooooooklyn" target="_blank" rel="noreferrer">@brooooooklyn</a>'s lead and <a href="https://github.com/napi-rs/napi-rs/pull/2032" target="_blank" rel="noreferrer">replace ESLint with oxlint in all his projects</a>.</p>
<p>If you are an open-source enthusiast and are willing to help out, come talk to us on <a href="https://discord.gg/9uXCAwqQZW" target="_blank" rel="noreferrer">discord</a>, check out the <a href="https://github.com/oxc-project/oxc/issues/481" target="_blank" rel="noreferrer">linter product plan and progress issue</a>, or help by <a href="https://github.com/oxc-project/oxc/issues/3161" target="_blank" rel="noreferrer">proposing new rules</a> that were deferred.</p>
<p>If you are an engineering manager, or are willing to migrate your project to oxlint (with 330 rules and growing) to keep your infrastructure costs down,
you may consider <a href="https://github.com/sponsors/Boshen" target="_blank" rel="noreferrer">sponsoring</a> so we can prioritize your project.</p>
<p>Please remember <code>oxlint</code> is currently community driven, I believe that with enough resources, we can make <code>--import-plugin</code> generally available in the next few months.</p>
<hr>
<p>To start using <code>oxlint</code>, follow the <a href="/docs/guide/usage/linter.html">installation guide</a> or learn more about the <a href="/docs/guide/introduction.html">oxc project</a>.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxc Transformer Alpha]]></title>
            <link>https://oxc.rs/blog/2024-09-29-transformer-alpha</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2024-09-29-transformer-alpha</guid>
            <pubDate>Sun, 29 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><br />
<p>We are excited to announce an alpha release for Oxc transform (a.k.a transpile).</p>
<p>This release contains three major features:</p>
<ol>
<li>Transforming TypeScript to ESNext.</li>
<li>Transforming React JSX to ESNext, with built-in React Refresh.</li>
<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#isolated-declarations" target="_blank" rel="noreferrer">TypeScript Isolated Declarations DTS Emit</a> without using the TypeScript compiler.</li>
</ol>
<p>In this alpha stage, we recommend to experiment with these features to speed up build times.</p>
<p><a href="https://github.com/oxc-project/bench-transformer" target="_blank" rel="noreferrer">Our benchmark</a> shows:</p>
<ul>
<li>Transform: Oxc is 3x - 5x faster than SWC, uses 20% less memory, and has smaller package size (2 MB vs SWC's 37 MB).</li>
<li>Transform: Oxc is 20x - 50x faster than Babel, uses 70% less memory, and is 19 MB smaller, with only 2 npm packages to install vs Babel's 170.</li>
<li>React development + React Refresh: Oxc is 5x faster than SWC, 50x faster than Babel.</li>
<li>TS isolated declarations <code>.d.ts</code> emit: Oxc is 40x faster than TSC on typical files, 20x faster on larger files.</li>
</ul>
<h2 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to “Usage Examples”">&#8203;</a></h2>
<h3 id="oxc-transform-npm-package" tabindex="-1"><a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer"><code>oxc-transform</code></a> npm package <a class="header-anchor" href="#oxc-transform-npm-package" aria-label="Permalink to “oxc-transform npm package”">&#8203;</a></h3>
<p>Vue.js is currently <a href="https://github.com/vuejs/core/blob/0895b2624b707ea1e75c41f2e1f75388e7a6f101/scripts/build-types.js#L20" target="_blank" rel="noreferrer">experimenting</a>
the <a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer"><code>oxc-transform</code></a> npm package for isolated declarations in its build pipeline:</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { isolatedDeclaration } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "oxc-transform"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> isolatedDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filename, ts);</span></span></code></pre>
</div><p><a href="https://github.com/lukeed" target="_blank" rel="noreferrer">@lukeed</a> and <a href="https://github.com/maraisr" target="_blank" rel="noreferrer">@maraisr</a> are utilizing <code>oxc-transform</code>
for their packages
<a href="https://github.com/lukeed/empathic" target="_blank" rel="noreferrer"><code>empathic</code></a> and <a href="https://github.com/maraisr/dldr" target="_blank" rel="noreferrer"><code>dldr</code></a>
to transform and generate <code>.d.ts</code> <a href="https://github.com/lukeed/empathic/blob/b83a360ff55051590dec19aa913cd12da97fa3f8/scripts/build.ts#L45-L52" target="_blank" rel="noreferrer">in a single step</a>.</p>
<p>The following example demonstrates emitting <code>.js</code> and <code>.d.ts</code> in a single transformation step:</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "oxc-transform"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> transformed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filePath, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  typescript: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    onlyRemoveTypeImports: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    declaration: { stripInternal: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, transformed.code);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out.d.ts"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, transformed.declaration);</span></span></code></pre>
</div><h3 id="unplugin-isolated-decl" tabindex="-1"><a href="https://github.com/unplugin/unplugin-isolated-decl" target="_blank" rel="noreferrer"><code>unplugin-isolated-decl</code></a> <a class="header-anchor" href="#unplugin-isolated-decl" aria-label="Permalink to “unplugin-isolated-decl”">&#8203;</a></h3>
<p><code>vue-macros</code> <a href="https://github.com/vue-macros/vue-macros/blob/4247c7ba9189c630111e058245ce1412c8da9229/tsup.config.ts#L10" target="_blank" rel="noreferrer">uses</a> <code>unplugin-isolated-decl</code> as the integration tool for its esbuild plugin.</p>
<p><a href="https://github.com/sxzz" target="_blank" rel="noreferrer">@sxzz</a> <a href="https://x.com/sanxiaozhizi/status/1821320327231893600" target="_blank" rel="noreferrer">reports</a> their <code>.d.ts</code> generation time is reduced from 76s to 16s.</p>
<h3 id="bazel-build-at-airtable" tabindex="-1">Bazel build at <a href="https://github.com/Airtable" target="_blank" rel="noreferrer">Airtable</a> <a class="header-anchor" href="#bazel-build-at-airtable" aria-label="Permalink to “Bazel build at Airtable”">&#8203;</a></h3>
<p><a href="https://github.com/MichaelMitchell-at" target="_blank" rel="noreferrer">@michaelm</a> from <a href="https://github.com/Airtable" target="_blank" rel="noreferrer">Airtable</a>
is integrating Oxc's isolated declarations <code>.d.ts</code> emit in their CI pipeline within their <a href="https://github.com/aspect-build/rules_ts/pull/697" target="_blank" rel="noreferrer">Bazel build</a>.</p>
<h3 id="rust-oxc-transformer-crate" tabindex="-1">Rust <a href="https://crates.io/crates/oxc_transformer" target="_blank" rel="noreferrer"><code>oxc_transformer</code></a> crate <a class="header-anchor" href="#rust-oxc-transformer-crate" aria-label="Permalink to “Rust oxc_transformer crate”">&#8203;</a></h3>
<p>The <a href="https://rolldown.rs" target="_blank" rel="noreferrer">Rolldown</a> bundler uses the <code>oxc_transformer</code> Rust crate <a href="https://github.com/rolldown/rolldown/blob/3213e8fdb9e25f29295b6ec0d92fcc2ce03ce396/crates/rolldown/src/utils/pre_process_ecma_ast.rs#L67-L75" target="_blank" rel="noreferrer">directly</a>.</p>
<h2 id="benchmark-results" tabindex="-1">Benchmark Results <a class="header-anchor" href="#benchmark-results" aria-label="Permalink to “Benchmark Results”">&#8203;</a></h2>
<p>The benchmark setup is located at <a href="https://github.com/oxc-project/bench-transformer" target="_blank" rel="noreferrer">oxc-project/bench-transformer</a>
and the benchmarks are shown in its <a href="https://github.com/oxc-project/bench-transformer/actions/workflows/ci.yml" target="_blank" rel="noreferrer">GitHub Actions</a>.</p>
<p>(Corrections are welcome for any misconfigurations.)</p>
<p>On <code>ubuntu-latest</code>, an example of different lines of code are measured:</p>
<h3 id="transform" tabindex="-1">Transform <a class="header-anchor" href="#transform" aria-label="Permalink to “Transform”">&#8203;</a></h3>
<p>| Lines  | oxc     | swc           | babel         |
|</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><br />
<p>We are excited to announce an alpha release for Oxc transform (a.k.a transpile).</p>
<p>This release contains three major features:</p>
<ol>
<li>Transforming TypeScript to ESNext.</li>
<li>Transforming React JSX to ESNext, with built-in React Refresh.</li>
<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#isolated-declarations" target="_blank" rel="noreferrer">TypeScript Isolated Declarations DTS Emit</a> without using the TypeScript compiler.</li>
</ol>
<p>In this alpha stage, we recommend to experiment with these features to speed up build times.</p>
<p><a href="https://github.com/oxc-project/bench-transformer" target="_blank" rel="noreferrer">Our benchmark</a> shows:</p>
<ul>
<li>Transform: Oxc is 3x - 5x faster than SWC, uses 20% less memory, and has smaller package size (2 MB vs SWC's 37 MB).</li>
<li>Transform: Oxc is 20x - 50x faster than Babel, uses 70% less memory, and is 19 MB smaller, with only 2 npm packages to install vs Babel's 170.</li>
<li>React development + React Refresh: Oxc is 5x faster than SWC, 50x faster than Babel.</li>
<li>TS isolated declarations <code>.d.ts</code> emit: Oxc is 40x faster than TSC on typical files, 20x faster on larger files.</li>
</ul>
<h2 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to “Usage Examples”">&#8203;</a></h2>
<h3 id="oxc-transform-npm-package" tabindex="-1"><a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer"><code>oxc-transform</code></a> npm package <a class="header-anchor" href="#oxc-transform-npm-package" aria-label="Permalink to “oxc-transform npm package”">&#8203;</a></h3>
<p>Vue.js is currently <a href="https://github.com/vuejs/core/blob/0895b2624b707ea1e75c41f2e1f75388e7a6f101/scripts/build-types.js#L20" target="_blank" rel="noreferrer">experimenting</a>
the <a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer"><code>oxc-transform</code></a> npm package for isolated declarations in its build pipeline:</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { isolatedDeclaration } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "oxc-transform"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> dts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> isolatedDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filename, ts);</span></span></code></pre>
</div><p><a href="https://github.com/lukeed" target="_blank" rel="noreferrer">@lukeed</a> and <a href="https://github.com/maraisr" target="_blank" rel="noreferrer">@maraisr</a> are utilizing <code>oxc-transform</code>
for their packages
<a href="https://github.com/lukeed/empathic" target="_blank" rel="noreferrer"><code>empathic</code></a> and <a href="https://github.com/maraisr/dldr" target="_blank" rel="noreferrer"><code>dldr</code></a>
to transform and generate <code>.d.ts</code> <a href="https://github.com/lukeed/empathic/blob/b83a360ff55051590dec19aa913cd12da97fa3f8/scripts/build.ts#L45-L52" target="_blank" rel="noreferrer">in a single step</a>.</p>
<p>The following example demonstrates emitting <code>.js</code> and <code>.d.ts</code> in a single transformation step:</p>
<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "oxc-transform"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> transformed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filePath, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  typescript: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    onlyRemoveTypeImports: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    declaration: { stripInternal: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, transformed.code);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">writeFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"out.d.ts"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, transformed.declaration);</span></span></code></pre>
</div><h3 id="unplugin-isolated-decl" tabindex="-1"><a href="https://github.com/unplugin/unplugin-isolated-decl" target="_blank" rel="noreferrer"><code>unplugin-isolated-decl</code></a> <a class="header-anchor" href="#unplugin-isolated-decl" aria-label="Permalink to “unplugin-isolated-decl”">&#8203;</a></h3>
<p><code>vue-macros</code> <a href="https://github.com/vue-macros/vue-macros/blob/4247c7ba9189c630111e058245ce1412c8da9229/tsup.config.ts#L10" target="_blank" rel="noreferrer">uses</a> <code>unplugin-isolated-decl</code> as the integration tool for its esbuild plugin.</p>
<p><a href="https://github.com/sxzz" target="_blank" rel="noreferrer">@sxzz</a> <a href="https://x.com/sanxiaozhizi/status/1821320327231893600" target="_blank" rel="noreferrer">reports</a> their <code>.d.ts</code> generation time is reduced from 76s to 16s.</p>
<h3 id="bazel-build-at-airtable" tabindex="-1">Bazel build at <a href="https://github.com/Airtable" target="_blank" rel="noreferrer">Airtable</a> <a class="header-anchor" href="#bazel-build-at-airtable" aria-label="Permalink to “Bazel build at Airtable”">&#8203;</a></h3>
<p><a href="https://github.com/MichaelMitchell-at" target="_blank" rel="noreferrer">@michaelm</a> from <a href="https://github.com/Airtable" target="_blank" rel="noreferrer">Airtable</a>
is integrating Oxc's isolated declarations <code>.d.ts</code> emit in their CI pipeline within their <a href="https://github.com/aspect-build/rules_ts/pull/697" target="_blank" rel="noreferrer">Bazel build</a>.</p>
<h3 id="rust-oxc-transformer-crate" tabindex="-1">Rust <a href="https://crates.io/crates/oxc_transformer" target="_blank" rel="noreferrer"><code>oxc_transformer</code></a> crate <a class="header-anchor" href="#rust-oxc-transformer-crate" aria-label="Permalink to “Rust oxc_transformer crate”">&#8203;</a></h3>
<p>The <a href="https://rolldown.rs" target="_blank" rel="noreferrer">Rolldown</a> bundler uses the <code>oxc_transformer</code> Rust crate <a href="https://github.com/rolldown/rolldown/blob/3213e8fdb9e25f29295b6ec0d92fcc2ce03ce396/crates/rolldown/src/utils/pre_process_ecma_ast.rs#L67-L75" target="_blank" rel="noreferrer">directly</a>.</p>
<h2 id="benchmark-results" tabindex="-1">Benchmark Results <a class="header-anchor" href="#benchmark-results" aria-label="Permalink to “Benchmark Results”">&#8203;</a></h2>
<p>The benchmark setup is located at <a href="https://github.com/oxc-project/bench-transformer" target="_blank" rel="noreferrer">oxc-project/bench-transformer</a>
and the benchmarks are shown in its <a href="https://github.com/oxc-project/bench-transformer/actions/workflows/ci.yml" target="_blank" rel="noreferrer">GitHub Actions</a>.</p>
<p>(Corrections are welcome for any misconfigurations.)</p>
<p>On <code>ubuntu-latest</code>, an example of different lines of code are measured:</p>
<h3 id="transform" tabindex="-1">Transform <a class="header-anchor" href="#transform" aria-label="Permalink to “Transform”">&#8203;</a></h3>
<table tabindex="0">
<thead>
<tr>
<th>Lines</th>
<th>oxc</th>
<th>swc</th>
<th>babel</th>
</tr>
</thead>
<tbody>
<tr>
<td>~100</td>
<td>0.14 ms</td>
<td>0.7 ms (5x)</td>
<td>11.5 ms (82x)</td>
</tr>
<tr>
<td>~1000</td>
<td>0.9 ms</td>
<td>5.7 ms (6.3x)</td>
<td>38.7 ms (43x)</td>
</tr>
<tr>
<td>~10000</td>
<td>14.9 ms</td>
<td>35.9 ms(2.4x)</td>
<td>492 ms (33x)</td>
</tr>
</tbody>
</table>
<h3 id="isolated-declarations" tabindex="-1">Isolated Declarations <a class="header-anchor" href="#isolated-declarations" aria-label="Permalink to “Isolated Declarations”">&#8203;</a></h3>
<table tabindex="0">
<thead>
<tr>
<th>Lines</th>
<th>oxc</th>
<th>tsc</th>
</tr>
</thead>
<tbody>
<tr>
<td>~100</td>
<td>0.1 ms</td>
<td>23.1 ms (231x)</td>
</tr>
<tr>
<td>~1000</td>
<td>3.1 ms</td>
<td>26.8 ms (8.6x)</td>
</tr>
<tr>
<td>~10000</td>
<td>3.5 ms</td>
<td>115.2 ms (33x)</td>
</tr>
</tbody>
</table>
<h2 id="package-size" tabindex="-1">Package size <a class="header-anchor" href="#package-size" aria-label="Permalink to “Package size”">&#8203;</a></h2>
<p>Oxc downloads only 2 npm packages, a total of 2 MB.</p>
<table tabindex="0">
<thead>
<tr>
<th>Package</th>
<th>Size</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@oxc-transform/binding-darwin-arm64</code></td>
<td><a href="https://www.npmjs.com/package/@oxc-transform/binding-darwin-arm64" target="_blank" rel="noreferrer">2.0 MB</a></td>
</tr>
<tr>
<td><code>@swc/core-darwin-arm64</code></td>
<td><a href="https://www.npmjs.com/package/@swc/core-darwin-arm64" target="_blank" rel="noreferrer">37.5 MB</a></td>
</tr>
<tr>
<td><code>@babel/core</code> + <code>@babel/preset-env</code> + <code>@babel/preset-react</code> + <code>@babel/preset-typescript</code></td>
<td><a href="https://www.npmjs.com/package/@oxc-transform/binding-darwin-arm64" target="_blank" rel="noreferrer">21 MB and 170 packages</a></td>
</tr>
</tbody>
</table>
<h2 id="memory-usage" tabindex="-1">Memory Usage <a class="header-anchor" href="#memory-usage" aria-label="Permalink to “Memory Usage”">&#8203;</a></h2>
<p>Oxc uses less memory.</p>
<p>Memory usage transforming <code>parser.ts</code> (10777 lines) - measured using <code>/usr/bin/time -alh node</code>:</p>
<table tabindex="0">
<thead>
<tr>
<th></th>
<th>Max RSS</th>
</tr>
</thead>
<tbody>
<tr>
<td>oxc</td>
<td>51 MB</td>
</tr>
<tr>
<td>swc</td>
<td>67 MB</td>
</tr>
<tr>
<td>babel</td>
<td>172 MB</td>
</tr>
</tbody>
</table>
<h2 id="next-release" tabindex="-1">Next Release <a class="header-anchor" href="#next-release" aria-label="Permalink to “Next Release”">&#8203;</a></h2>
<p>Our next release will include target lowering to ES6 and <code>@babel/plugin-transform-modules-commonjs</code>.</p>
<h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">&#8203;</a></h2>
<p>Thank you <a href="https://github.com/dunqing" target="_blank" rel="noreferrer">@Dunqing</a> and <a href="https://github.com/overlookmotel" target="_blank" rel="noreferrer">@overlookmotel</a> for all the hard work involved in this release.</p>
<p>Thank you <a href="https://snyder.tech" target="_blank" rel="noreferrer">snyder.tech</a>, <a href="https://schoolhouse.world" target="_blank" rel="noreferrer">schoolhouse.world</a>, <a href="https://github.com/lukeed" target="_blank" rel="noreferrer">@lukeed</a> and <a href="https://github.com/maraisr" target="_blank" rel="noreferrer">@maraisr</a> for the generous <a href="https://github.com/sponsors/boshen" target="_blank" rel="noreferrer">sponsorship</a>.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxlint v0.10 Migration Guide]]></title>
            <link>https://oxc.rs/blog/2024-10-18-oxlint-v0.10-release</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2024-10-18-oxlint-v0.10-release</guid>
            <pubDate>Fri, 18 Oct 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<AppBlogPostHeader /><p>Oxlint v0.10.0 is here! This release includes several exciting features,
including many improvements to configuration files.</p>
<h2 id="new-features" tabindex="-1">New Features <a class="header-anchor" href="#new-features" aria-label="Permalink to “New Features”">&#8203;</a></h2>
<!-- todo: other features -->
<h3 id="new-rules" tabindex="-1">New Rules <a class="header-anchor" href="#new-rules" aria-label="Permalink to “New Rules”">&#8203;</a></h3>
<p>This release includes the following new rules:</p>
<ul>
<li><code>promise/no-callback-in-promise</code></li>
<li><code>react/iframe-missing-sandbox</code></li>
<li><code>node/no-new-require</code></li>
</ul>
<p>And adds auto fixes/suggestions for:</p>
<ul>
<li><code>eslint/no-plusplus</code></li>
</ul>
<h3 id="enable-disable-rules-by-category" tabindex="-1">Enable/Disable Rules by Category <a class="header-anchor" href="#enable-disable-rules-by-category" aria-label="Permalink to “Enable/Disable Rules by Category”">&#8203;</a></h3>
<p>You can now enable or disable entire categories of rules with the <code>categories</code>
field inside of your configuration file.</p>
<p>Now, instead of running this command:</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> correctness</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -W</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> suspicious</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint.json</span></span></code></pre>
</div><p>You can add a <code>categories</code> field to your <code>oxlint.json</code>:</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-55" id="tab-56" checked><label data-title="oxlintrc.json" for="tab-56">oxlintrc.json</label></div><div class="blocks">
<div class="language-jsonc active"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "categories"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: { </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "correctness"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"deny"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "suspicious"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"warn"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "no-const-assign"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "import/no-cycle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div></div></div>
<p>and drop the <code>-D</code> and <code>-W</code> flags.</p>
<h3 id="plugins-are-now-supported-in-configuration-files" tabindex="-1"><code>plugins</code> Are Now Supported in Configuration Files <a class="header-anchor" href="#plugins-are-now-supported-in-configuration-files" aria-label="Permalink to “plugins Are Now Supported in Configuration Files”">&#8203;</a></h3>
<p>Configuration files now support the <code>plugins</code> array from ESLint v8 configs.
This allows you to enable plugins without CLI arguments, making it possible to
use plugins in VSCode.</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-67" id="tab-68" checked><label data-title="oxlintrc.json" for="tab-68">oxlintrc.json</label></div><div class="blocks">
<div class="language-jsonc active"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "plugins"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"import"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">], </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "categories"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "correctness"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"deny"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "suspicious"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"warn"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "react/jsx-uses-react"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"off"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "react/react-in-jsx-scope"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"off"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div></div></div>
<p>This plays nicely with <code>categories</code>, as enabled/disabled categories affect plugins as well.</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-73" id="tab-74" checked><label data-title="oxlintrc.json" for="tab-74">oxlintrc.json</label></div><div class="blocks">
<div class="language-jsonc active"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "plugins"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"import"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">  // `categories` affects all enabled plugins</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "categories"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "correctness"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"allow"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "suspicious"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"warn"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "no-const-assign"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "import/no-cycle"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div></div></div>
<h2 id="breaking-changes-and-migration-guide" tabindex="-1">Breaking Changes and Migration Guide <a class="header-anchor" href="#breaking-changes-and-migration-guide" aria-label="Permalink to “Breaking Changes and Migration Guide”">&#8203;</a></h2>
<h3 id="cli-vs-config-file-rule-priority" tabindex="-1">CLI vs Config File Rule Priority <a class="header-anchor" href="#cli-vs-config-file-rule-priority" aria-label="Permalink to “CLI vs Config File Rule Priority”">&#8203;</a></h3>
<p>Before, config files would override rules set in CLI arguments. For example, running this command:</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> correctness</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlintrc.json</span></span></code></pre>
</div><p>With this config file</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-89" id="tab-90" checked><label data-title="oxlintrc.json" for="tab-90">oxlintrc.json</label></div><div class="blocks">
<div class="language-jsonc active"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "no-const-assign"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div></div></div>
<p>Would result in a single rule, <code>no-const-assign</code> being turned on at an error level with all other rules disabled (i.e. set to &quot;allow&quot;).</p>
<p>Now, <strong>CLI arguments will override config files</strong>. That same command with the
same config file will result with <strong>all rules being disabled</strong>. To get the same
behavior as before, enable and disable categories in your config file instead of
with CLI arguments.</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint.json</span></span></code></pre>
</div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-99" id="tab-100" checked><label data-title="oxlintrc.json" for="tab-100">oxlintrc.json</label></div><div class="blocks">
<div class="language-jsonc active"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "categories"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: { </span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "correctness"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"allow"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "no-const-assign"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div></div></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxc Minifier Alpha]]></title>
            <link>https://oxc.rs/blog/2025-03-13-minifier-alpha</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2025-03-13-minifier-alpha</guid>
            <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><br />
<p>We are excited to announce an alpha release for <a href="https://www.npmjs.com/package/oxc-minify" target="_blank" rel="noreferrer"><code>oxc-minify</code></a>.</p>
<p>While lacking some advanced minification techniques,
the current version already outperforms <code>esbuild</code> in terms of performance and compression size,
as demonstrated by <a href="https://github.com/privatenumber/minification-benchmarks" target="_blank" rel="noreferrer">minification-benchmarks</a>.</p>
<p>Comparing widely-used minifiers on <code>typescript.js</code>:</p>
<div align="center">
<p>| Artifact                                                                                                                               |                   Original size |                         Gzip size |                                   |
| :</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><br />
<p>We are excited to announce an alpha release for <a href="https://www.npmjs.com/package/oxc-minify" target="_blank" rel="noreferrer"><code>oxc-minify</code></a>.</p>
<p>While lacking some advanced minification techniques,
the current version already outperforms <code>esbuild</code> in terms of performance and compression size,
as demonstrated by <a href="https://github.com/privatenumber/minification-benchmarks" target="_blank" rel="noreferrer">minification-benchmarks</a>.</p>
<p>Comparing widely-used minifiers on <code>typescript.js</code>:</p>
<div align="center">
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left">Artifact</th>
<th style="text-align:right">Original size</th>
<th style="text-align:right">Gzip size</th>
<th style="text-align:right"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.npmjs.com/package/typescript/v/4.9.5" target="_blank" rel="noreferrer">typescript v4.9.5</a> (<a href="https://unpkg.com/typescript@4.9.5/lib/typescript.js" target="_blank" rel="noreferrer">Source</a>)</td>
<td style="text-align:right"><code>10.95 MB</code></td>
<td style="text-align:right"><code>1.88 MB</code></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><strong>Minifier</strong></td>
<td style="text-align:right"><strong>Minified size</strong></td>
<td style="text-align:right"><strong>Minzipped size</strong></td>
<td style="text-align:right"><strong>Time</strong></td>
</tr>
<tr>
<td style="text-align:left"><a href="packages/minifiers/minifiers/swc.ts">@swc/core</a></td>
<td style="text-align:right"><strong><sup>🏆-70% </sup><code>3.32 MB</code></strong></td>
<td style="text-align:right"><strong><sup>🏆-54% </sup><code>858.29 kB</code></strong></td>
<td style="text-align:right"><sup><em>5x</em> </sup><code>2,179 ms</code></td>
</tr>
<tr>
<td style="text-align:left"><a href="packages/minifiers/minifiers/oxc-minify.ts">oxc-minify</a></td>
<td style="text-align:right"><sup>-69% </sup><code>3.35 MB</code></td>
<td style="text-align:right"><sup>-54% </sup><code>860.67 kB</code></td>
<td style="text-align:right">🏆 <code>444 ms</code></td>
</tr>
<tr>
<td style="text-align:left"><a href="packages/minifiers/minifiers/terser.ts">terser (no compress)</a></td>
<td style="text-align:right"><sup>-68% </sup><code>3.53 MB</code></td>
<td style="text-align:right"><sup>-53% </sup><code>879.30 kB</code></td>
<td style="text-align:right"><sup><em>14x</em> </sup><code>6,433 ms</code></td>
</tr>
<tr>
<td style="text-align:left"><a href="packages/minifiers/minifiers/esbuild.ts">esbuild</a></td>
<td style="text-align:right"><sup>-68% </sup><code>3.49 MB</code></td>
<td style="text-align:right"><sup>-51% </sup><code>915.55 kB</code></td>
<td style="text-align:right"><sup><em>1x</em> </sup><code>492 ms</code></td>
</tr>
<tr>
<td style="text-align:left"><a href="packages/minifiers/minifiers/terser.ts">terser</a> <sub title="Failed: timeout">❌ Timed out</sub></td>
<td style="text-align:right">-</td>
<td style="text-align:right">-</td>
<td style="text-align:right"><sup>⚠️</sup> <code>+10,000 ms</code></td>
</tr>
</tbody>
</table>
</div>
<h2 id="oxc-minify-usage-example" tabindex="-1"><a href="https://www.npmjs.com/package/oxc-minify" target="_blank" rel="noreferrer"><code>oxc-minify</code></a> Usage Example <a class="header-anchor" href="#oxc-minify-usage-example" aria-label="Permalink to “oxc-minify Usage Example”">&#8203;</a></h2>
<div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { minify } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "oxc-minify"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "test.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "const x = 'a' + 'b'; console.log(x);"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  compress: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"esnext"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  mangle: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    toplevel: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  codegen: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    removeWhitespace: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  sourcemap: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> minify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(filename, code, options);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result.code);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(result.map);</span></span></code></pre>
</div><h2 id="next-release" tabindex="-1">Next Release <a class="header-anchor" href="#next-release" aria-label="Permalink to “Next Release”">&#8203;</a></h2>
<p><code>oxc-minify</code> is being integrated into <a href="https://rolldown.rs" target="_blank" rel="noreferrer">Rolldown</a> as its built-in minifier,
and Rolldown is set to <a href="https://voidzero.dev/posts/announcing-voidzero-inc" target="_blank" rel="noreferrer">become the future of Vite</a>.</p>
<p>So it is critical for us to:</p>
<ul>
<li>Continue implementing advanced minification techniques, such as constant inlining and dead code removal.</li>
<li>Strengthen and expand our test infrastructure to ensure it is production-ready.</li>
</ul>
<h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">&#8203;</a></h2>
<p>Thank you <a href="https://github.com/sapphi-red" target="_blank" rel="noreferrer">@sapphi-red</a> for improving the minifier,
especially the advanced symbol minification algorithm which <code>esbuild</code> lacks.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxlint Beta]]></title>
            <link>https://oxc.rs/blog/2025-03-15-oxlint-beta</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2025-03-15-oxlint-beta</guid>
            <pubDate>Sat, 15 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><p>We are thrilled to announce that Oxlint is now in beta release, after more than a year of development by the community!</p>
<p>This milestone represents a significant step forward in feature completeness, performance, and stability.</p>
<h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to “How to use”">&#8203;</a></h2>
<p>At this stage, Oxlint can be used to fully replace ESLint in small to medium projects.</p>
<p>For larger projects, our advice is to turn off ESLint rules via <a href="https://www.npmjs.com/package/eslint-plugin-oxlint" target="_blank" rel="noreferrer">eslint-plugin-oxlint</a>,
and run Oxlint before ESLint in your local or CI setup for a quicker feedback loop.</p>
<p>To test Oxlint in your codebase, you can use the package manager of your choice at the root of your codebase:</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-20" id="tab-21" checked><label data-title="npm" for="tab-21">npm</label><input type="radio" name="group-20" id="tab-22" ><label data-title="pnpm" for="tab-22">pnpm</label><input type="radio" name="group-20" id="tab-23" ><label data-title="yarn" for="tab-23">yarn</label><input type="radio" name="group-20" id="tab-24" ><label data-title="bun" for="tab-24">bun</label><input type="radio" name="group-20" id="tab-25" ><label data-title="deno" for="tab-25">deno</label></div><div class="blocks">
<div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> bunx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npm:oxlint@latest</span></span></code></pre>
</div></div></div>
<p>For more detailed instructions on how to use Oxlint and integrate it with your project or editor, check out the <a href="/docs/guide/usage/linter.html">installation guide</a>.</p>
<h2 id="highlight-of-new-features-since-general-availability" tabindex="-1">Highlight of new features since general availability <a class="header-anchor" href="#highlight-of-new-features-since-general-availability" aria-label="Permalink to “Highlight of new features since general availability”">&#8203;</a></h2>
<ul>
<li>Significant performance improvements, up to twice as fast compared to the previous release</li>
<li>Includes over 500 rules built-in, with no extra installation required</li>
<li>Many rules from the <code>typescript</code>, <code>unicorn</code>, <code>react</code>, <code>react-perf</code>, <code>nextjs</code>, <code>import</code>, <code>jsdoc</code>, <code>jsx-a11y</code>, <code>node</code>, <code>promise</code>, <code>jest</code>, <code>vitest</code> plugins are now complete.</li>
<li>Support for configuration via <a href="/docs/guide/usage/linter/nested-config.html#configuration-file-format"><code>.oxlintrc.json</code> files</a>, including <a href="/docs/guide/usage/linter/nested-config.html">nested configuration files</a>, using <code>extends</code> to share configuration between files, applying <code>overrides</code> to specific files, and more.</li>
<li>Supports linting <code>&lt;script&gt;</code> content in <code>.astro</code>, <code>.svelte</code> and <code>.vue</code> files with no additional configuration needed.</li>
<li>Allows applying <a href="/docs/guide/usage/linter/automatic-fixes.html">automatic fixes</a> and suggestions to files.</li>
</ul>
<h2 id="more-rules-more-performance" tabindex="-1">More rules, more performance <a class="header-anchor" href="#more-rules-more-performance" aria-label="Permalink to “More rules, more performance”">&#8203;</a></h2>
<p>We have focused on making Oxlint more feature complete, supporting many of the most commonly used ESLint rules and plugins, but we have also made Oxlint much faster as well.</p>
<p>The first <a href="./2023-12-12-announcing-oxlint.html">generally available (GA) release of Oxlint</a> had 205 rules in total, with 70 of those being enabled by default. This beta release now includes 502 rules in total, with 99 of those being enabled by default (a 41% increase in the number of rules enabled by default).</p>
<p>| Rule type       | Rule count (GA) | Rule count (beta) | Increase       |
|</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><p>We are thrilled to announce that Oxlint is now in beta release, after more than a year of development by the community!</p>
<p>This milestone represents a significant step forward in feature completeness, performance, and stability.</p>
<h2 id="how-to-use" tabindex="-1">How to use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to “How to use”">&#8203;</a></h2>
<p>At this stage, Oxlint can be used to fully replace ESLint in small to medium projects.</p>
<p>For larger projects, our advice is to turn off ESLint rules via <a href="https://www.npmjs.com/package/eslint-plugin-oxlint" target="_blank" rel="noreferrer">eslint-plugin-oxlint</a>,
and run Oxlint before ESLint in your local or CI setup for a quicker feedback loop.</p>
<p>To test Oxlint in your codebase, you can use the package manager of your choice at the root of your codebase:</p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-20" id="tab-21" checked><label data-title="npm" for="tab-21">npm</label><input type="radio" name="group-20" id="tab-22" ><label data-title="pnpm" for="tab-22">pnpm</label><input type="radio" name="group-20" id="tab-23" ><label data-title="yarn" for="tab-23">yarn</label><input type="radio" name="group-20" id="tab-24" ><label data-title="bun" for="tab-24">bun</label><input type="radio" name="group-20" id="tab-25" ><label data-title="deno" for="tab-25">deno</label></div><div class="blocks">
<div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> bunx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npm:oxlint@latest</span></span></code></pre>
</div></div></div>
<p>For more detailed instructions on how to use Oxlint and integrate it with your project or editor, check out the <a href="/docs/guide/usage/linter.html">installation guide</a>.</p>
<h2 id="highlight-of-new-features-since-general-availability" tabindex="-1">Highlight of new features since general availability <a class="header-anchor" href="#highlight-of-new-features-since-general-availability" aria-label="Permalink to “Highlight of new features since general availability”">&#8203;</a></h2>
<ul>
<li>Significant performance improvements, up to twice as fast compared to the previous release</li>
<li>Includes over 500 rules built-in, with no extra installation required</li>
<li>Many rules from the <code>typescript</code>, <code>unicorn</code>, <code>react</code>, <code>react-perf</code>, <code>nextjs</code>, <code>import</code>, <code>jsdoc</code>, <code>jsx-a11y</code>, <code>node</code>, <code>promise</code>, <code>jest</code>, <code>vitest</code> plugins are now complete.</li>
<li>Support for configuration via <a href="/docs/guide/usage/linter/nested-config.html#configuration-file-format"><code>.oxlintrc.json</code> files</a>, including <a href="/docs/guide/usage/linter/nested-config.html">nested configuration files</a>, using <code>extends</code> to share configuration between files, applying <code>overrides</code> to specific files, and more.</li>
<li>Supports linting <code>&lt;script&gt;</code> content in <code>.astro</code>, <code>.svelte</code> and <code>.vue</code> files with no additional configuration needed.</li>
<li>Allows applying <a href="/docs/guide/usage/linter/automatic-fixes.html">automatic fixes</a> and suggestions to files.</li>
</ul>
<h2 id="more-rules-more-performance" tabindex="-1">More rules, more performance <a class="header-anchor" href="#more-rules-more-performance" aria-label="Permalink to “More rules, more performance”">&#8203;</a></h2>
<p>We have focused on making Oxlint more feature complete, supporting many of the most commonly used ESLint rules and plugins, but we have also made Oxlint much faster as well.</p>
<p>The first <a href="./2023-12-12-announcing-oxlint.html">generally available (GA) release of Oxlint</a> had 205 rules in total, with 70 of those being enabled by default. This beta release now includes 502 rules in total, with 99 of those being enabled by default (a 41% increase in the number of rules enabled by default).</p>
<table tabindex="0">
<thead>
<tr>
<th>Rule type</th>
<th>Rule count (GA)</th>
<th>Rule count (beta)</th>
<th>Increase</th>
</tr>
</thead>
<tbody>
<tr>
<td>Default rules</td>
<td>70</td>
<td>99</td>
<td>+29 rules</td>
</tr>
<tr>
<td>Correctness</td>
<td>88</td>
<td>173</td>
<td>+88 rules</td>
</tr>
<tr>
<td>Performance</td>
<td>0</td>
<td>9</td>
<td>+9 rules</td>
</tr>
<tr>
<td>Restrictions</td>
<td>15</td>
<td>64</td>
<td>+49 rules</td>
</tr>
<tr>
<td>Pedantic</td>
<td>43</td>
<td>79</td>
<td>+36 rules</td>
</tr>
<tr>
<td>Style</td>
<td>38</td>
<td>137</td>
<td>+99 rules</td>
</tr>
<tr>
<td>Suspicious</td>
<td>7</td>
<td>28</td>
<td>+21 rules</td>
</tr>
<tr>
<td><strong>Total rules</strong></td>
<td>205</td>
<td><strong>502</strong></td>
<td><strong>+297 rules</strong></td>
</tr>
</tbody>
</table>
<p>Despite adding many new rules that are enabled by default, Oxlint is now much faster than it ever has been. Here are some <a href="https://gist.github.com/camchenry/cb09f6fae14ec1e3df1f72938b7350c8" target="_blank" rel="noreferrer">benchmarks</a> on some popular repositories:</p>
<table tabindex="0">
<thead>
<tr>
<th>Repository</th>
<th>File count</th>
<th>Lint time (GA)</th>
<th>Lint time (beta)</th>
<th>Speedup</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>elastic/kibana</code></td>
<td>68,591</td>
<td>6.02s</td>
<td><strong>3.11s</strong></td>
<td><strong>1.94x</strong></td>
</tr>
<tr>
<td><code>microsoft/vscode</code></td>
<td>5,703</td>
<td>1.697s</td>
<td><strong>0.792s</strong></td>
<td><strong>2.14x</strong></td>
</tr>
<tr>
<td><code>vitest-dev/vitest</code></td>
<td>1,732</td>
<td>105ms</td>
<td><strong>50ms</strong></td>
<td><strong>2.1x</strong></td>
</tr>
<tr>
<td><code>vuejs/core</code></td>
<td>1,063</td>
<td>217ms</td>
<td><strong>89ms</strong></td>
<td><strong>2.44x</strong></td>
</tr>
</tbody>
</table>
<h2 id="roadmap" tabindex="-1">Roadmap <a class="header-anchor" href="#roadmap" aria-label="Permalink to “Roadmap”">&#8203;</a></h2>
<p>One of the most commonly requested features for Oxlint is support for existing custom ESLint plugins. We have been busy working on the prerequisites for this feature, and to enable fast linter plugins written in JavaScript. We hope to have this feature available for the next major release, and more information to share about it in the near future.</p>
<p>We also are planning to continue improving the IDE/editor integrations, with improved support for VSCode, Zed, <code>coc.nvim</code>, and IntelliJ plugins.</p>
<h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">&#8203;</a></h2>
<p>Oxlint beta would not have been possible without the over 200 contributors to the project.</p>
<p>Special thanks goes to:</p>
<ul>
<li><a href="https://github.com/camc314" target="_blank" rel="noreferrer">@cam314</a>, <a href="https://github.com/mysteryven" target="_blank" rel="noreferrer">@mysteryven</a>, and <a href="https://github.com/shulaoda" target="_blank" rel="noreferrer">@shulaoda</a> for implementing many sophisticated lint rules, testing, and constantly improving everything.</li>
<li><a href="https://github.com/Sysix" target="_blank" rel="noreferrer">@Sysix</a> for maintaining <code>eslint-plugin-oxlint</code>.</li>
<li><a href="https://github.com/DonIsaac" target="_blank" rel="noreferrer">@DonIsaac</a> for improving configuration, documentation and website, and for representing Oxc at <a href="https://2024.squiggleconf.com" target="_blank" rel="noreferrer">SquiggleConf 2024</a>.</li>
<li><a href="https://github.com/leaysgur" target="_blank" rel="noreferrer">@leaysgur</a> for the RegExp parser and JSDoc plugin.</li>
<li><a href="https://github.com/u9g" target="_blank" rel="noreferrer">@u9g</a> and <a href="https://github.com/rzvxa" target="_blank" rel="noreferrer">@rzvxa</a> for implementing control flow graph analysis.</li>
<li><a href="https://github.com/branchseer" target="_blank" rel="noreferrer">@branchseer</a> for implementing the multi-file analysis runtime.</li>
<li><a href="https://github.com/camchenry" target="_blank" rel="noreferrer">@camchenry</a> for implementing nested configuration support.</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxlint v1.0 Stable]]></title>
            <link>https://oxc.rs/blog/2025-06-10-oxlint-stable</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2025-06-10-oxlint-stable</guid>
            <pubDate>Tue, 10 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><br>
<div  class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p>
<p>This blog post was <a href="https://voidzero.dev/posts/announcing-oxlint-1-stable" target="_blank" rel="noreferrer">originally published on the VoidZero website</a>.</p>
</div>
<br>
<p>TL;DR: The first stable version Oxlint has been released! With a <a href="#benchmark">50~100x</a> performance improvement over ESLint, support for over 500 ESLint rules, and <a href="#real-world-impact">usage in major companies</a> like Shopify, Airbnb, and Mercedes-Benz, you should give it a try. <a href="#quick-start">Get started now</a>.</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><br>
<div  class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p>
<p>This blog post was <a href="https://voidzero.dev/posts/announcing-oxlint-1-stable" target="_blank" rel="noreferrer">originally published on the VoidZero website</a>.</p>
</div>
<br>
<p>TL;DR: The first stable version Oxlint has been released! With a <a href="#benchmark">50~100x</a> performance improvement over ESLint, support for over 500 ESLint rules, and <a href="#real-world-impact">usage in major companies</a> like Shopify, Airbnb, and Mercedes-Benz, you should give it a try. <a href="#quick-start">Get started now</a>.</p>
<hr>
<p>Oxlint is a Rust-powered linter for JavaScript and TypeScript is designed to be fast and simple to adopt. Since its first announcement back in December 2023, Oxlint has undergone significant improvements and is now shipping its first stable version, 1.0.
In addition to the stable release, we also want to announce that Oxlint has a dedicated full-time maintainer, <a href="https://github.com/camc314" target="_blank" rel="noreferrer">Cameron</a>, and a growing core team working on maintaining and improving the linter.</p>
<h2 id="real-world-impact" tabindex="-1">Real-World Impact <a class="header-anchor" href="#real-world-impact" aria-label="Permalink to “Real-World Impact”">&#8203;</a></h2>
<p>We are extremely proud of the performance of Oxlint and its impact on real, large-scale codebases, which has led to reduced CI costs.</p>
<p>We are thankful for our <a href="https://github.com/oxc-project/oxc/network/dependents" target="_blank" rel="noreferrer">5,200 early adopters</a> and for companies and projects such as:</p>
<ul>
<li><strong>Shopify</strong>, where the front-end platform team uses Oxlint in the Shopify admin console.</li>
<li><strong>Airbnb</strong>, where they use multi-file analysis <a href="https://oxc.rs/docs/guide/usage/linter/rules/oxc/no-barrel-file.html" target="_blank" rel="noreferrer">oxc/no-barrel-file</a> and <a href="https://oxc.rs/docs/guide/usage/linter/rules/import/no-cycle.html" target="_blank" rel="noreferrer">import/no-cycle</a> on their 126,000+ files, which completes in 7s on CI. ESLint's implementation of these rules times out.</li>
<li><a href="https://www.mercedes-benz.io/blog/2025-05-16-how-can-modern-tooling-save-mercedes-benz-io-engineering-time" target="_blank" rel="noreferrer"><strong>Mercedes-Benz</strong></a>, where they observed a 71% decrease in lint time when swapping ESLint to Oxlint, with some project seeing up to a 97% speedup.</li>
<li>Large Open Source projects, from runtimes like <a href="https://github.com/oven-sh/bun/blob/main/oxlint.json" target="_blank" rel="noreferrer">Bun</a> to frameworks like <a href="https://github.com/preactjs/preact/blob/main/oxlint.json" target="_blank" rel="noreferrer">Preact</a>.</li>
</ul>
<p>On the largest repository we found, Oxlint reported:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span>Finished in 22.5s on 264925 files with 101 rules using 10 threads.</span></span></code></pre>
</div><p>Based on real-world cases posted on <a href="https://x.com/boshen_c/status/1928264877115597053" target="_blank" rel="noreferrer">X</a> and <a href="https://bsky.app/profile/boshen.github.io/post/3lqe47xi47c2e" target="_blank" rel="noreferrer">Bluesky</a>,
Oxlint runs at approximately 10,000 files per second, depending on the total number of threads used.</p>
<h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to “Quick Start”">&#8203;</a></h2>
<p>Oxlint is perfect for developers who want to start linting their code without spending hours configuring tools. With zero setup required, you can start catching issues immediately:</p>
<p><strong>Run it, no config required.</strong></p>
<div class="vp-code-group"><div class="tabs"><input type="radio" name="group-63" id="tab-64" checked><label data-title="npm" for="tab-64">npm</label><input type="radio" name="group-63" id="tab-65" ><label data-title="pnpm" for="tab-65">pnpm</label><input type="radio" name="group-63" id="tab-66" ><label data-title="yarn" for="tab-66">yarn</label><input type="radio" name="group-63" id="tab-67" ><label data-title="bun" for="tab-67">bun</label><input type="radio" name="group-63" id="tab-68" ><label data-title="deno" for="tab-68">deno</label></div><div class="blocks">
<div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> bunx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span></span></code></pre>
</div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> deno</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> npm:oxlint@latest</span></span></code></pre>
</div></div></div>
<p>While no setup or configuration is needed, Oxlint is configurable via an <code>.oxlintrc.json</code> file, which is useful for larger projects or projects that require more customization.
This configuration format is based on ESLint v8’s flat config, making migration easy and familiar.
Each source file is linted with the nearest applicable configuration, and you can use overrides to target specific glob patterns.
You can also extend shared configs to keep teams consistent.</p>
<p>For projects already using ESLint, <a href="https://github.com/oxc-project/oxlint-migrate" target="_blank" rel="noreferrer">oxlint-migrate</a> can be used to migrate an existing ESLint flat-config file to Oxlint.
Additionally, <a href="https://github.com/oxc-project/eslint-plugin-oxlint" target="_blank" rel="noreferrer">eslint-plugin-oxlint</a> can disable overlapping ESLint rules while both linters are used together.
It is recommended to run <code>oxlint &amp;&amp; eslint</code> to benefit from Oxlint's faster feedback cycle.</p>
<p>For more detailed instructions on how to use Oxlint and integrate it with your project or editor, check out the <a href="https://oxc.rs/docs/guide/usage/linter" target="_blank" rel="noreferrer">installation guide</a>.</p>
<h2 id="versioning" tabindex="-1">Versioning <a class="header-anchor" href="#versioning" aria-label="Permalink to “Versioning”">&#8203;</a></h2>
<p>Unlike libraries that ship runtime code, a linter only changes the diagnostics it returns. Oxlint adheres to semantic versioning:</p>
<ul>
<li>Patch releases: Bug fixes only.</li>
<li>Minor releases: Expand rule coverage and diagnostics, without requiring configuration changes.</li>
<li>Major releases: CLI or configuration changes, that may require migration.
Note that minor releases can still break your CI if newly added rules uncover previously hidden issues. Learn more in our <a href="https://oxc.rs/docs/guide/usage/linter/versioning" target="_blank" rel="noreferrer">Versioning guide</a>.</li>
</ul>
<h2 id="highlights" tabindex="-1">Highlights <a class="header-anchor" href="#highlights" aria-label="Permalink to “Highlights”">&#8203;</a></h2>
<h3 id="comprehensive-rule-coverage" tabindex="-1">Comprehensive Rule Coverage <a class="header-anchor" href="#comprehensive-rule-coverage" aria-label="Permalink to “Comprehensive Rule Coverage”">&#8203;</a></h3>
<p>Oxlint includes over 500 rules from various sources:</p>
<ul>
<li>Complete ESLint rule set, including TypeScript-specific rules from <code>typescript-eslint</code> (excluding type checked rules).</li>
<li>Popular plugin rules from <code>eslint-plugin-unicorn</code>, <code>eslint-plugin-jsdoc</code>, <code>eslint-plugin-react</code>, <code>eslint-plugin-react-hooks</code>, <code>eslint-plugin-jest</code>, and <code>eslint-plugin-import</code></li>
<li>Unique Oxlint rules like <a href="https://oxc.rs/docs/guide/usage/linter/rules/oxc/bad-comparison-sequence" target="_blank" rel="noreferrer">bad comparison sequence</a>, <a href="https://oxc.rs/docs/guide/usage/linter/rules/oxc/const-comparisons" target="_blank" rel="noreferrer">const comparisons</a>, and <a href="https://oxc.rs/docs/guide/usage/linter/rules/oxc/only-used-in-recursion" target="_blank" rel="noreferrer">only used in recursion</a></li>
</ul>
<h3 id="flexible-configuration" tabindex="-1">Flexible Configuration <a class="header-anchor" href="#flexible-configuration" aria-label="Permalink to “Flexible Configuration”">&#8203;</a></h3>
<p>Configure Oxlint through <code>.oxlintrc.json</code> files with support for:</p>
<ul>
<li>Nested configurations that apply to specific directories</li>
<li>Override patterns for targeting specific file types or locations</li>
<li>Shared configuration extending for team consistency</li>
</ul>
<h3 id="editor-integration" tabindex="-1">Editor Integration <a class="header-anchor" href="#editor-integration" aria-label="Permalink to “Editor Integration”">&#8203;</a></h3>
<p>First-class editor support with extensions for:</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=oxc.oxc-vscode" target="_blank" rel="noreferrer">VS Code</a></li>
<li><a href="https://plugins.jetbrains.com/plugin/27061-oxc" target="_blank" rel="noreferrer">IntelliJ IDEA and WebStorm</a></li>
<li><a href="https://zed.dev/extensions?query=oxc" target="_blank" rel="noreferrer">Zed Editor</a></li>
<li>Language server protocol support for other editors</li>
</ul>
<h3 id="helpful-diagnostics" tabindex="-1">Helpful Diagnostics <a class="header-anchor" href="#helpful-diagnostics" aria-label="Permalink to “Helpful Diagnostics”">&#8203;</a></h3>
<p>Oxlint is built to deliver clear, actionable error messages - not just describing the issue, but visualizing it and suggesting how to fix it.</p>
<p><img src="https://github.com/oxc-project/oxc/assets/1430279/094a3b24-0433-42ae-aad2-48a7dec2b985" alt="CLI Demo">
<em>Oxlint running in the terminal with detailed error reporting</em></p>
<h2 id="benchmark" tabindex="-1">Benchmark <a class="header-anchor" href="#benchmark" aria-label="Permalink to “Benchmark”">&#8203;</a></h2>
<p>Our <a href="https://github.com/oxc-project/bench-javascript-linter" target="_blank" rel="noreferrer">benchmark</a> reveals that Oxlint is around 50~100 times faster than ESLint with the same setup.</p>
<table tabindex="0">
<thead>
<tr>
<th>Tool</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>oxlint (multi thread)</td>
<td>615.3 ms</td>
</tr>
<tr>
<td>oxlint (single thread)</td>
<td>1.840 s</td>
</tr>
<tr>
<td>eslint</td>
<td>33.481 s</td>
</tr>
</tbody>
</table>
<h2 id="roadmap" tabindex="-1">Roadmap <a class="header-anchor" href="#roadmap" aria-label="Permalink to “Roadmap”">&#8203;</a></h2>
<p>Oxlint 1.0 is just the beginning! While it is stable, we still have important features and improvements planned for future releases:</p>
<p><strong>Custom Rules</strong> – JavaScript plugin support is coming soon, enabling teams to write custom rules that integrate seamlessly with Oxlint's architecture.</p>
<p><strong>Performance Optimizations</strong> – Continued improvements to parsing and analysis speed.</p>
<p><strong>Fine-grained (per-glob) configuration</strong> - ESLint v9 configuration</p>
<h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">&#8203;</a></h2>
<p>Oxlint 1.0 represents the collective effort of <a href="https://github.com/oxc-project/oxc/graphs/contributors" target="_blank" rel="noreferrer">over 200 contributors</a> who have shaped this project. We're grateful for every bug report, feature request, and code contribution.</p>
<p>Special recognition goes to:</p>
<ul>
<li><a href="https://github.com/branchseer" target="_blank" rel="noreferrer">@branchseer</a> for implementing the multi-file analysis runtime.</li>
<li><a href="https://github.com/camc314" target="_blank" rel="noreferrer">@camc314</a>, <a href="https://github.com/mysteryven" target="_blank" rel="noreferrer">@mysteryven</a>, and <a href="https://github.com/shulaoda" target="_blank" rel="noreferrer">@shulaoda</a> for implementing many sophisticated lint rules, testing, and constantly improving everything.</li>
<li><a href="https://github.com/camchenry" target="_blank" rel="noreferrer">@camchenry</a> for implementing nested configuration support.</li>
<li><a href="https://github.com/DonIsaac" target="_blank" rel="noreferrer">@DonIsaac</a> for improving configuration, documentation and website, and for representing Oxc at <a href="https://2024.squiggleconf.com" target="_blank" rel="noreferrer">SquiggleConf 2024</a>.</li>
<li><a href="https://github.com/leaysgur" target="_blank" rel="noreferrer">@leaysgur</a> for the RegExp parser and JSDoc plugin.</li>
<li><a href="https://github.com/Sysix" target="_blank" rel="noreferrer">@Sysix</a> for maintaining <code>eslint-plugin-oxlint</code> and significant contributions to the language server and VSCode extension.</li>
<li><a href="https://github.com/u9g" target="_blank" rel="noreferrer">@u9g</a> and <a href="https://github.com/rzvxa" target="_blank" rel="noreferrer">@rzvxa</a> for implementing control flow graph analysis.</li>
</ul>
<h2 id="join-the-community" tabindex="-1">Join the Community <a class="header-anchor" href="#join-the-community" aria-label="Permalink to “Join the Community”">&#8203;</a></h2>
<p>We'd love to hear your feedback on Oxlint and are excited to see how it helps improve your development workflow. Connect with us:</p>
<ul>
<li><strong>Discord</strong>: Join our <a href="https://discord.gg/9uXCAwqQZW" target="_blank" rel="noreferrer">community server</a> for real-time discussions</li>
<li><strong>GitHub</strong>: Share feedback on <a href="https://github.com/oxc-project/oxc/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a></li>
<li><strong>Issues</strong>: Report bugs or request features on our <a href="https://github.com/oxc-project/oxc/issues" target="_blank" rel="noreferrer">issue tracker</a></li>
</ul>
<p>Your feedback drives Oxlint's evolution.</p>
<h2 id="give-it-a-try" tabindex="-1">Give It a Try <a class="header-anchor" href="#give-it-a-try" aria-label="Permalink to “Give It a Try”">&#8203;</a></h2>
<p>To get started, follow the <a href="https://oxc.rs/docs/guide/usage/linter" target="_blank" rel="noreferrer">installation guide</a>, or learn more about the <a href="https://oxc.rs/docs/guide/introduction" target="_blank" rel="noreferrer">Oxc project</a>.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxlint Type-Aware Preview]]></title>
            <link>https://oxc.rs/blog/2025-08-17-oxlint-type-aware</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2025-08-17-oxlint-type-aware</guid>
            <pubDate>Sun, 17 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><br>
<p>We're thrilled to announce type-aware linting in <code>oxlint</code>!</p>
<p>The long-awaited <code>no-floating-promises</code> and related rules are here.</p>
<p>This preview release aims to engage with the community for collaboration and
discussion by documenting our decision process and technical details.</p>
<h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to “Quick Start”">&#8203;</a></h2>
<p>If <code>oxlint</code> is already configured, install <code>oxlint-tsgolint</code> and run <code>oxlint</code> with the <code>--type-aware</code> flag:</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --type-aware</span></span></code></pre>
</div><p>If <code>oxlint</code> is not configured but you want to see <code>no-floating-promises</code> in action:</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --type-aware</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> typescript/no-floating-promises</span></span></code></pre>
</div><p>We expect to see, for example:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> × typescript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">eslint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">floating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">promises): Promises must be awaited, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a call to .catch, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a call to .then </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a rejection handler or be explicitly marked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ignored</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> with</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `void`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> operator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ╭─[packages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rolldown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">watch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">watcher.ts:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">29</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> │       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> │       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">originClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ·       ──────────────</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> │     };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ╰────</span></span></code></pre>
</div><p>Please visit our <a href="https://oxc.rs/docs/guide/usage/linter.html" target="_blank" rel="noreferrer">usage guide</a> for more configuration options.</p>
<h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to “Performance”">&#8203;</a></h2>
<p>Our testing shows that repositories which previously took a minute to run with <code>typescript-eslint</code> now complete in less than 10 seconds.</p>
<p>This is achieved by leveraging <a href="https://github.com/microsoft/typescript-go" target="_blank" rel="noreferrer"><code>typescript-go</code></a>,
the <a href="https://devblogs.microsoft.com/typescript/typescript-native-port" target="_blank" rel="noreferrer">10x faster TypeScript</a> written in Go.</p>
<p>Using projects from <a href="https://github.com/oxc-project/oxlint-ecosystem-ci" target="_blank" rel="noreferrer">oxlint-ecosystem-ci</a>:</p>
<p>| Project  | Files | Time |
|</p>
]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><br>
<p>We're thrilled to announce type-aware linting in <code>oxlint</code>!</p>
<p>The long-awaited <code>no-floating-promises</code> and related rules are here.</p>
<p>This preview release aims to engage with the community for collaboration and
discussion by documenting our decision process and technical details.</p>
<h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to “Quick Start”">&#8203;</a></h2>
<p>If <code>oxlint</code> is already configured, install <code>oxlint-tsgolint</code> and run <code>oxlint</code> with the <code>--type-aware</code> flag:</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --type-aware</span></span></code></pre>
</div><p>If <code>oxlint</code> is not configured but you want to see <code>no-floating-promises</code> in action:</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --type-aware</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> typescript/no-floating-promises</span></span></code></pre>
</div><p>We expect to see, for example:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> × typescript</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">eslint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">floating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">promises): Promises must be awaited, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a call to .catch, end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a call to .then </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> a rejection handler or be explicitly marked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> ignored</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> with</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> `void`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> operator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ╭─[packages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">rolldown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">watch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">watcher.ts:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">29</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> │       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> │       </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">originClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ·       ──────────────</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> │     };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">   ╰────</span></span></code></pre>
</div><p>Please visit our <a href="https://oxc.rs/docs/guide/usage/linter.html" target="_blank" rel="noreferrer">usage guide</a> for more configuration options.</p>
<h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to “Performance”">&#8203;</a></h2>
<p>Our testing shows that repositories which previously took a minute to run with <code>typescript-eslint</code> now complete in less than 10 seconds.</p>
<p>This is achieved by leveraging <a href="https://github.com/microsoft/typescript-go" target="_blank" rel="noreferrer"><code>typescript-go</code></a>,
the <a href="https://devblogs.microsoft.com/typescript/typescript-native-port" target="_blank" rel="noreferrer">10x faster TypeScript</a> written in Go.</p>
<p>Using projects from <a href="https://github.com/oxc-project/oxlint-ecosystem-ci" target="_blank" rel="noreferrer">oxlint-ecosystem-ci</a>:</p>
<table tabindex="0">
<thead>
<tr>
<th>Project</th>
<th>Files</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>napi-rs</td>
<td>144</td>
<td>1.0s</td>
</tr>
<tr>
<td>preact</td>
<td>245</td>
<td>2.7s</td>
</tr>
<tr>
<td>rolldown</td>
<td>314</td>
<td>1.5s</td>
</tr>
<tr>
<td>bluesky</td>
<td>1152</td>
<td>7.0s</td>
</tr>
</tbody>
</table>
<h2 id="type-aware-linting" tabindex="-1">Type-Aware Linting <a class="header-anchor" href="#type-aware-linting" aria-label="Permalink to “Type-Aware Linting”">&#8203;</a></h2>
<p>Please refer to
<a href="https://www.joshuakgoldberg.com/blog/rust-based-javascript-linters-fast-but-no-typed-linting-right-now" target="_blank" rel="noreferrer">Rust-Based JavaScript Linters: Fast, But No Typed Linting Right Now</a>
to understand the current status of type-aware linting in the ecosystem.</p>
<h2 id="technical-details" tabindex="-1">Technical Details <a class="header-anchor" href="#technical-details" aria-label="Permalink to “Technical Details”">&#8203;</a></h2>
<p>The core of this new functionality is <a href="https://github.com/oxc-project/tsgolint" target="_blank" rel="noreferrer">oxc-project/tsgolint</a>.</p>
<p>The <code>tsgolint</code> project was initially prototyped as <a href="https://github.com/typescript-eslint/tsgolint" target="_blank" rel="noreferrer">typescript-eslint/tsgolint</a>.
However, the <code>typescript-eslint</code> team decided not to allocate development resources to this prototype, as they plan to continue their work on <code>typescript-eslint</code> for typed linting with ESLint.</p>
<p><a href="https://github.com/Boshen" target="_blank" rel="noreferrer">@boshen</a> reached out to <a href="https://github.com/auvred" target="_blank" rel="noreferrer">@auvred</a> for a forked, scoped-down version adapted for oxlint.
This version would only contain type-aware rules without the sophisticated configuration resolution a full linter would require.</p>
<p><a href="https://github.com/auvred" target="_blank" rel="noreferrer">@auvred</a> generously offered to continue its development under the Oxc organization.</p>
<h3 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to “Architecture”">&#8203;</a></h3>
<p><code>oxlint</code> (written in Rust) and <code>tsgolint</code> (written in Go) are compiled into their own binaries.</p>
<p><code>oxlint</code> serves as the &quot;frontend&quot; for <code>tsgolint</code>, handling the CLI, path traversal, ignore logic, and diagnostic printing.</p>
<p><code>tsgolint</code> acts as the backend for <code>oxlint</code>, accepting paths and configuration as input and outputting structured diagnostics.</p>
<p>This creates a simple pipeline:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span>oxlint CLI (returns paths + rules + configuration)</span></span>
<span class="line"><span>  -> tsgolint (returns diagnostics)</span></span>
<span class="line"><span>  -> oxlint CLI (prints diagnostics)</span></span></code></pre>
</div><h3 id="tsgolint" tabindex="-1"><code>tsgolint</code> <a class="header-anchor" href="#tsgolint" aria-label="Permalink to “tsgolint”">&#8203;</a></h3>
<p><code>tsgolint</code> does not communicate with typescript-go via public APIs.</p>
<p>Instead, it compiles <code>typescript-go</code> by <a href="https://github.com/oxc-project/tsgolint/tree/main/shim" target="_blank" rel="noreferrer">shimming</a> its internal APIs to make them public.</p>
<p>All type-aware rules are written directly against these shimmed APIs.</p>
<p>While this isn't the recommended approach for accessing internals, it works!</p>
<h2 id="decision-process" tabindex="-1">Decision Process <a class="header-anchor" href="#decision-process" aria-label="Permalink to “Decision Process”">&#8203;</a></h2>
<h3 id="write-our-own-type-checker" tabindex="-1">Write our own type checker <a class="header-anchor" href="#write-our-own-type-checker" aria-label="Permalink to “Write our own type checker”">&#8203;</a></h3>
<p>Previous abandoned attempts to implement a type-checker included:</p>
<ul>
<li>My own attempt at <a href="https://gist.github.com/Boshen/d189de0fe0720a30c5182cb666e3e9a5" target="_blank" rel="noreferrer">writing type inference</a></li>
<li><a href="https://github.com/oxc-project/oxc/pull/413" target="_blank" rel="noreferrer">Integrate</a> <a href="https://github.com/kaleidawave/ezno" target="_blank" rel="noreferrer">ezno type checker</a> by <a href="https://github.com/kaleidawave" target="_blank" rel="noreferrer">@kaleidawave</a></li>
<li><a href="https://github.com/dudykr/stc" target="_blank" rel="noreferrer">stc</a> by <a href="https://github.com/kdy1" target="_blank" rel="noreferrer">@kdy1</a></li>
<li>There are also many attempts in the community that did not go far.</li>
</ul>
<p>Additionally, there's the work-in-progress <a href="https://biomejs.dev/blog/biome-v2/" target="_blank" rel="noreferrer">Biome 2.0</a> with its own type-inference implementation.</p>
<p>We determined that writing our own type-inferencer or type-checker was not feasible due to
the challenge of keeping up with a fast-moving target like TypeScript.</p>
<h3 id="communication-with-typescript-compiler" tabindex="-1">Communication with TypeScript Compiler <a class="header-anchor" href="#communication-with-typescript-compiler" aria-label="Permalink to “Communication with TypeScript Compiler”">&#8203;</a></h3>
<p>Prior to <code>typescript-go</code>, projects added plugin interfaces to TypeScript's public API by either mapping its AST to <code>estree</code> or directly traversing the TypeScript AST. Examples include:</p>
<ul>
<li><a href="https://typescript-eslint.io/getting-started/typed-linting" target="_blank" rel="noreferrer">typescript-eslint</a></li>
<li><a href="https://github.com/johnsoncodehk/tsslint" target="_blank" rel="noreferrer">tsslint</a></li>
<li><a href="https://github.com/ArnaudBarre/tsl" target="_blank" rel="noreferrer">tsl</a></li>
</ul>
<p>We also explored <a href="https://github.com/oxc-project/oxc/discussions/2855" target="_blank" rel="noreferrer">inter-process communication with oxlint</a> but abandoned the idea.</p>
<p>With <code>typescript-go</code>, the TypeScript team is <a href="https://github.com/microsoft/typescript-go/discussions/455" target="_blank" rel="noreferrer">leaning towards</a>
encoding the TypeScript AST and decoding it on the JavaScript side through inter-process communication.</p>
<p>While these approaches work, they still incur:</p>
<ul>
<li>Performance issues of varying degrees that don't suit oxlint's performance characteristics.</li>
<li>The cost of maintaining an AST mapping from TypeScript's AST.</li>
</ul>
<h2 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-label="Permalink to “Considerations”">&#8203;</a></h2>
<p>While <code>tsgolint</code> solves the performance issue, there are other technical challenges that need to be addressed.</p>
<h3 id="requirement-for-a-different-typescript-version" tabindex="-1">Requirement for a Different TypeScript Version <a class="header-anchor" href="#requirement-for-a-different-typescript-version" aria-label="Permalink to “Requirement for a Different TypeScript Version”">&#8203;</a></h3>
<p>We plan to release snapshots of <code>typescript-go</code> versions and align their version numbers with TypeScript.
You will then be able to install <code>oxlint-typescript</code> with the correct TypeScript version.</p>
<p>The downside of this approach is that you may need to upgrade TypeScript if <code>oxlint-tsgolint</code> requires changes.</p>
<h3 id="maintenance-cost-of-tsgolint" tabindex="-1">Maintenance cost of <code>tsgolint</code> <a class="header-anchor" href="#maintenance-cost-of-tsgolint" aria-label="Permalink to “Maintenance cost of tsgolint”">&#8203;</a></h3>
<p>Shimming TypeScript's internal APIs carries some risk. However, the TypeScript AST and its visitor are actually quite stable.
We accept this risk and will fix breaking changes when upgrading <code>typescript-go</code>.</p>
<p>Our <code>typescript-go</code> version is synced every day.</p>
<h2 id="performance-issues" tabindex="-1">Performance Issues <a class="header-anchor" href="#performance-issues" aria-label="Permalink to “Performance Issues”">&#8203;</a></h2>
<p><code>tsgolint</code> currently does not perform well on large monorepos with hundreds of projects or lots of project references.</p>
<p>It may hang with a deadlock or cause OOM (out-of-memory) if a bug is encountered.</p>
<p>We are actively addressing these issues, profiling and submitting improves to <code>typescript-go</code>, benefiting all <code>typescript-go</code> users.</p>
<p>Our core team member <a href="https://github.com/camc314" target="_blank" rel="noreferrer">@camc314</a> has already submitted <a href="https://github.com/microsoft/typescript-go/pulls?q=is%3Apr+author%3Acamc314+" target="_blank" rel="noreferrer">many PRs</a> that made several code paths significantly faster.</p>
<h2 id="v1-0-release" tabindex="-1">v1.0 Release <a class="header-anchor" href="#v1-0-release" aria-label="Permalink to “v1.0 Release”">&#8203;</a></h2>
<p>For <code>tsgolint</code> v1.0, we will address:</p>
<ul>
<li>performance issue for large monorepos</li>
<li>be able to configure individual rules</li>
<li>correctness of each individual rules</li>
<li>IDE support</li>
<li>overall stability</li>
</ul>
<h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to “Acknowledgements”">&#8203;</a></h2>
<p>We'd like to extend our gratitude to:</p>
<ul>
<li>The TypeScript team for creating <code>typescript-go</code>.</li>
<li>The <code>typescript-eslint</code> team for their heartwarming support.</li>
<li><a href="https://github.com/auvred" target="_blank" rel="noreferrer">@auvred</a> for creating <code>tsgolint</code>.</li>
<li><a href="https://github.com/camchenry" target="_blank" rel="noreferrer">@camchenry</a> for the <code>oxlint</code> + <code>tsgolint</code> integration.</li>
<li><a href="https://github.com/camc314" target="_blank" rel="noreferrer">@camc314</a> for work on performance issues.</li>
</ul>
<h2 id="join-the-community" tabindex="-1">Join the Community <a class="header-anchor" href="#join-the-community" aria-label="Permalink to “Join the Community”">&#8203;</a></h2>
<p>We'd love to hear your feedback on <code>oxlint</code> and type-aware linting and are excited to see how it helps improve your development workflow.</p>
<p>Connect with us:</p>
<ul>
<li><strong>Discord</strong>: Join our <a href="https://discord.gg/9uXCAwqQZW" target="_blank" rel="noreferrer">community server</a> for real-time discussions</li>
<li><strong>GitHub</strong>: Share feedback on <a href="https://github.com/oxc-project/oxc/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a></li>
<li><strong>Issues</strong>: Report <code>oxlint</code> bugs to <a href="https://github.com/oxc-project/oxc/issues" target="_blank" rel="noreferrer">oxc</a> and type-aware linting bugs to <a href="https://github.com/oxc-project/tsgolint/issues" target="_blank" rel="noreferrer">tsgolint</a>.</li>
</ul>
<h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to “Next steps”">&#8203;</a></h2>
<p>Install <code>oxlint</code>:</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint-tsgolint@latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D"> # generate .oxlintrc.json</span></span></code></pre>
</div><p>or follow the <a href="https://oxc.rs/docs/guide/usage/linter" target="_blank" rel="noreferrer">installation guide</a>.</p>
<p>Use the <code>--type-aware</code> CLI flag.</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> dlx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --type-aware</span></span></code></pre>
</div><p>And play around with any of the type-aware rules in <code>.oxlintrc.json</code>:</p>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "$schema"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./node_modules/oxlint/configuration_schema.json"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/await-thenable"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-array-delete"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-base-to-string"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-confusing-void-expression"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-duplicate-type-constituents"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-floating-promises"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-for-in-array"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-implied-eval"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-meaningless-void-operator"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-misused-promises"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-misused-spread"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-mixed-enums"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-redundant-type-constituents"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unnecessary-boolean-literal-compare"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unnecessary-template-expression"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unnecessary-type-arguments"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unnecessary-type-assertion"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-argument"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-assignment"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-call"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-enum-comparison"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-member-access"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-return"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-type-assertion"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/no-unsafe-unary-minus"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/non-nullable-type-assertion-style"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/only-throw-error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/prefer-promise-reject-errors"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/prefer-reduce-type-parameter"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/prefer-return-this-type"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/promise-function-async"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/related-getter-setter-pairs"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/require-array-sort-compare"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/require-await"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/restrict-plus-operands"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/restrict-template-expressions"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/return-await"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/switch-exhaustiveness-check"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/unbound-method"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "typescript/use-unknown-in-catch-callback-variable"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Oxlint JS Plugins Preview]]></title>
            <link>https://oxc.rs/blog/2025-10-09-oxlint-js-plugins</link>
            <guid isPermaLink="false">https://oxc.rs/blog/2025-10-09-oxlint-js-plugins</guid>
            <pubDate>Thu, 09 Oct 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<AppBlogPostHeader /><br>
<p>Earlier this year <a href="https://github.com/oxc-project/oxc/discussions/10342" target="_blank" rel="noreferrer">we asked for input from the community</a>
to inform design for Oxlint support for custom JS plugins. Today, we are pleased to announce the result of many months
of research, prototyping, and finally building:</p>
<p><strong>Oxlint supports plugins written in JS!</strong></p>
<h4 id="key-features" tabindex="-1">Key features <a class="header-anchor" href="#key-features" aria-label="Permalink to “Key features”">&#8203;</a></h4>
<ul>
<li>ESLint-compatible plugin API. Oxlint will be able to run many existing ESLint plugins without modification.</li>
<li>An alternative API which is slightly different, and unlocks better performance.</li>
</ul>
<h4 id="what-this-is-and-isn-t" tabindex="-1">What this is and isn't <a class="header-anchor" href="#what-this-is-and-isn-t" aria-label="Permalink to “What this is and isn't”">&#8203;</a></h4>
<p>This preview release is just the beginning. It is important to note that:</p>
<ul>
<li>This initial release does not implement all of ESLint's plugin API.</li>
<li>Performance is good, but it's going to get <em>way</em> better - we have many optimizations in the pipeline.</li>
</ul>
<p>The most commonly-used APIs for code-checking rules <a href="#features">are implemented</a>, so many existing ESLint rules will already work.
But token-related APIs are absent, so stylistic (formatting) rules will not.</p>
<p>We invite users to take it for a spin, give feedback, and inform our priorities for the next phase of development.</p>
<h4 id="this-blog-post-covers" tabindex="-1">This blog post covers <a class="header-anchor" href="#this-blog-post-covers" aria-label="Permalink to “This blog post covers”">&#8203;</a></h4>
<ol>
<li>How to use it.</li>
<li>What's coming next.</li>
<li>Some of the technical details that enable our &quot;have cake and eat it&quot; approach of providing both ESLint compatibility
<strong>and</strong> excellent performance.</li>
</ol>
<h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to “Quick Start”">&#8203;</a></h2>
<p>Install Oxlint in your project:</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span></span></code></pre>
</div><p>Write a custom JS plugin:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// plugin.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// The simplest rule of all - no debugger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> rule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      DebuggerStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"No debugger!"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          node,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"best-plugin-ever"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "no-debugger"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: rule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> plugin;</span></span></code></pre>
</div><p>Create config file enabling the plugin:</p>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// .oxlintrc.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "jsPlugins"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./plugin.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "best-plugin-ever/no-debugger"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>Add a file to be linted:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// foo.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">debugger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>Run Oxlint:</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span></span></code></pre>
</div><p>Expect to see:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span> x best-plugin-ever(no-debugger): No debugger!</span></span>
<span class="line"><span>  ,-[foo.js:1:1]</span></span>
<span class="line"><span>1 | debugger;</span></span>
<span class="line"><span>  : ^^^^^^^^^</span></span>
<span class="line"><span>  `</span></span></code></pre>
</div>]]></description>
            <content:encoded><![CDATA[<AppBlogPostHeader /><br>
<p>Earlier this year <a href="https://github.com/oxc-project/oxc/discussions/10342" target="_blank" rel="noreferrer">we asked for input from the community</a>
to inform design for Oxlint support for custom JS plugins. Today, we are pleased to announce the result of many months
of research, prototyping, and finally building:</p>
<p><strong>Oxlint supports plugins written in JS!</strong></p>
<h4 id="key-features" tabindex="-1">Key features <a class="header-anchor" href="#key-features" aria-label="Permalink to “Key features”">&#8203;</a></h4>
<ul>
<li>ESLint-compatible plugin API. Oxlint will be able to run many existing ESLint plugins without modification.</li>
<li>An alternative API which is slightly different, and unlocks better performance.</li>
</ul>
<h4 id="what-this-is-and-isn-t" tabindex="-1">What this is and isn't <a class="header-anchor" href="#what-this-is-and-isn-t" aria-label="Permalink to “What this is and isn't”">&#8203;</a></h4>
<p>This preview release is just the beginning. It is important to note that:</p>
<ul>
<li>This initial release does not implement all of ESLint's plugin API.</li>
<li>Performance is good, but it's going to get <em>way</em> better - we have many optimizations in the pipeline.</li>
</ul>
<p>The most commonly-used APIs for code-checking rules <a href="#features">are implemented</a>, so many existing ESLint rules will already work.
But token-related APIs are absent, so stylistic (formatting) rules will not.</p>
<p>We invite users to take it for a spin, give feedback, and inform our priorities for the next phase of development.</p>
<h4 id="this-blog-post-covers" tabindex="-1">This blog post covers <a class="header-anchor" href="#this-blog-post-covers" aria-label="Permalink to “This blog post covers”">&#8203;</a></h4>
<ol>
<li>How to use it.</li>
<li>What's coming next.</li>
<li>Some of the technical details that enable our &quot;have cake and eat it&quot; approach of providing both ESLint compatibility
<strong>and</strong> excellent performance.</li>
</ol>
<h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to “Quick Start”">&#8203;</a></h2>
<p>Install Oxlint in your project:</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span></span></code></pre>
</div><p>Write a custom JS plugin:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// plugin.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// The simplest rule of all - no debugger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> rule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      DebuggerStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"No debugger!"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          node,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"best-plugin-ever"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">    "no-debugger"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: rule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> plugin;</span></span></code></pre>
</div><p>Create config file enabling the plugin:</p>
<div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// .oxlintrc.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "jsPlugins"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"./plugin.js"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">  "rules"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">    "best-plugin-ever/no-debugger"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"error"</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div><p>Add a file to be linted:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">// foo.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">debugger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>
</div><p>Run Oxlint:</p>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> oxlint</span></span></code></pre>
</div><p>Expect to see:</p>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span> x best-plugin-ever(no-debugger): No debugger!</span></span>
<span class="line"><span>  ,-[foo.js:1:1]</span></span>
<span class="line"><span>1 | debugger;</span></span>
<span class="line"><span>  : ^^^^^^^^^</span></span>
<span class="line"><span>  `----</span></span></code></pre>
</div><p>For further details on authoring plugins, see <a href="/docs/guide/usage/linter/js-plugins.html">the docs</a>.</p>
<h2 id="alternative-api" tabindex="-1">Alternative API <a class="header-anchor" href="#alternative-api" aria-label="Permalink to “Alternative API”">&#8203;</a></h2>
<p>Oxlint also offers a slightly different API which unlocks better performance.</p>
<p><strong>This alternative API produces plugins which are compatible with ESLint, as well as Oxlint.</strong></p>
<p>Example rule that flags files containing more than 5 class declarations:</p>
<h4 id="eslint-version" tabindex="-1">ESLint version <a class="header-anchor" href="#eslint-version" aria-label="Permalink to “ESLint version”">&#8203;</a></h4>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> rule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> classCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      ClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        classCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (classCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Too many classes"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, node });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">};</span></span></code></pre>
</div><h4 id="alternative-api-version" tabindex="-1">Alternative API version <a class="header-anchor" href="#alternative-api-version" aria-label="Permalink to “Alternative API version”">&#8203;</a></h4>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> { defineRule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> "oxlint"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> rule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0"> defineRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">  createOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">    // Define counter variable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> classCount;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">        // Reset counter before traversing AST of each file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        classCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D">      // Same as before</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">      ClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        classCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> (classCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">"Too many classes"</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, node });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">});</span></span></code></pre>
</div><h4 id="the-differences" tabindex="-1">The differences <a class="header-anchor" href="#the-differences" aria-label="Permalink to “The differences”">&#8203;</a></h4>
<ol>
<li>Wrap the rule object in <code>defineRule(...)</code>.</li>
</ol>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7">- const rule = {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+ const rule = defineRule({</span></span></code></pre>
</div><ol start="2">
<li>Use <code>createOnce</code> instead of <code>create</code>.</li>
</ol>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7">-   create(context) {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+   createOnce(context) {</span></span></code></pre>
</div><ol start="3">
<li>Move any per-file setup from body of <code>create</code> into <code>before</code> hook.</li>
</ol>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7">-     let classCount = 0;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+     let classCount;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      return {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+       before() {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+         classCount = 0; // Reset counter</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+       },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        ClassDeclaration(node) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          classCount++;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          if (classCount === 6) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">            context.report({ message: "Too many classes", node });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  });</span></span></code></pre>
</div><p>This is the only significant difference - <code>create</code> (ESLint's method) is called repeatedly <em>for each file</em>,
whereas <code>createOnce</code> is called once only.</p>
<p>All other APIs behave exactly the same as in ESLint.</p>
<p>The reasons why this alternative API has potential to greatly improve performance are explained in
<a href="/docs/guide/usage/linter/js-plugins.html#why-is-the-alternative-api-faster">the docs</a>.</p>
<h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to “Performance”">&#8203;</a></h2>
<p>As mentioned above, performance has not been our focus in this initial preview release of Oxlint JS plugins.
Our primary goal has been to fill out enough of the API for JS plugins to be useful in real world projects,
and gather feedback from early adopters.</p>
<p>Performance at present is decent, but not by any means stellar.</p>
<p>However - and we feel this is the important point - our prototype of the <em>next</em> version demonstrates that the
architectural design we've settled on is capable of <em>exceptional</em> performance, once various optimizations are added
into the mix (see <a href="#under-the-hood">Under the hood</a>).</p>
<p>We'll be applying those optimization over the course of the next few months, and users will see multiple x speed-ups
compared to the current version.</p>
<p>That said, even without those optimizations, Oxlint's performance is still competitive.</p>
<p>Oxlint vs ESLint linting a medium-sized TypeScript project <a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">vuejs/core</a>:</p>
<table tabindex="0">
<thead>
<tr>
<th>Linter</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>ESLint</td>
<td>4,116 ms</td>
</tr>
<tr>
<td>ESLint multi-threaded</td>
<td>3,710 ms</td>
</tr>
<tr>
<td>Oxlint</td>
<td>48 ms</td>
</tr>
<tr>
<td>Oxlint with custom JS plugin</td>
<td>236 ms</td>
</tr>
</tbody>
</table>
<div>
<details>
<summary>Details</summary>
<div  class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p>
<ul>
<li>Benchmark repo: <a href="https://github.com/overlookmotel/vue-core-cam/tree/bench-js-plugins" target="_blank" rel="noreferrer">https://github.com/overlookmotel/vue-core-cam/tree/bench-js-plugins</a></li>
<li>Benchmarked on MacBook Air M3, 24GB RAM</li>
<li>Bench command:</li>
</ul>
<div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">hyperfine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> --warmup</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  './node_modules/.bin/oxlint --silent'</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  './node_modules/.bin/oxlint -c .oxlintrc-with-custom-plugin.json --silent'</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  'USE_CUSTOM_PLUGIN=true ./node_modules/.bin/eslint .'</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF"> \</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">  'USE_CUSTOM_PLUGIN=true ./node_modules/.bin/eslint . --concurrency=auto'</span></span></code></pre>
</div><p>Note: The version of Oxlint on NPM at time of writing (1.23.0) has a bug which affects this benchmark, and hugely
underestimates the cost of JS plugins. The above results were obtained using latest <code>main</code> branch, after the bug fix,
at <a href="https://github.com/oxc-project/oxc/commit/cd266b4c101c35c33e122457cdd0b514b44597a9" target="_blank" rel="noreferrer">this commit</a>.
Please also see <a href="#edit-18th-oct-2025">below</a>.</p>
</div>
</details>
</div>
<p>In this example, adding a simple JS plugin to Oxlint does have a significant cost, but Oxlint is still 15x faster
than ESLint, even using ESLint's new multi-threaded runner.</p>
<p>Obviously, more complicated JS plugins, or many of them, will have a higher performance cost.</p>
<h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to “Features”">&#8203;</a></h2>
<p>Oxlint supports most of ESLint's APIs which are typically used in plugins/rules which rely only on AST inspection.
That includes most &quot;fix code&quot;-type rules.</p>
<p>It does not yet support token-based APIs, so stylistic (formatting) rules will not work yet.</p>
<h4 id="supported" tabindex="-1">Supported <a class="header-anchor" href="#supported" aria-label="Permalink to “Supported”">&#8203;</a></h4>
<ul>
<li>AST traversal</li>
<li>AST exploration (<code>node.parent</code>, <code>context.sourceCode.getAncestors</code>)</li>
<li>Fixes</li>
<li>Selectors (<a href="https://eslint.org/docs/latest/extend/selectors" target="_blank" rel="noreferrer">ESLint docs</a>)</li>
<li><code>SourceCode</code> APIs (e.g. <code>context.sourceCode.getText(node)</code>)</li>
</ul>
<h4 id="not-supported-yet" tabindex="-1">Not supported yet <a class="header-anchor" href="#not-supported-yet" aria-label="Permalink to “Not supported yet”">&#8203;</a></h4>
<ul>
<li>Language server (IDE) support</li>
<li>Rule options</li>
<li>Suggestions</li>
<li>Scope analysis</li>
<li><code>SourceCode</code> APIs related to tokens and comments (e.g. <code>context.sourceCode.getTokens(node)</code>)</li>
<li>Control flow analysis</li>
</ul>
<h2 id="what-s-next" tabindex="-1">What's next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to “What's next”">&#8203;</a></h2>
<p>Over the next few months, we will be:</p>
<h4 id="_1-filling-out-the-plugin-api-surface" tabindex="-1">1. Filling out the plugin API surface <a class="header-anchor" href="#_1-filling-out-the-plugin-api-surface" aria-label="Permalink to “1. Filling out the plugin API surface”">&#8203;</a></h4>
<p>Aim is to support 100% of ESLint's plugin API surface, so that Oxlint will eventually be able to run <em>any</em> ESLint
plugin without modification.</p>
<h4 id="_2-improving-performance" tabindex="-1">2. Improving performance <a class="header-anchor" href="#_2-improving-performance" aria-label="Permalink to “2. Improving performance”">&#8203;</a></h4>
<p>Performance is already decent, but we have proven during our prototyping many significant performance gains from further
optimizations. We will apply them, and make JS plugins in Oxlint run at as close to Rust speed as we can get.</p>
<h2 id="under-the-hood" tabindex="-1">Under the hood <a class="header-anchor" href="#under-the-hood" aria-label="Permalink to “Under the hood”">&#8203;</a></h2>
<p>The rest of this post is not necessary to use JS plugins with Oxlint. But if you're interested in the geeky details
of how our implementation works, read on...</p>
<h3 id="the-big-question-to-eslint-compat-or-not-to-eslint-compat" tabindex="-1">The big question: To ESLint compat or not to ESLint compat? <a class="header-anchor" href="#the-big-question-to-eslint-compat-or-not-to-eslint-compat" aria-label="Permalink to “The big question: To ESLint compat or not to ESLint compat?”">&#8203;</a></h3>
<p>The question which <a href="https://github.com/oxc-project/oxc/discussions/10342" target="_blank" rel="noreferrer">we posed to the community</a> earlier this year
was whether Oxlint should aim for an ESLint-compatible plugin API or not.</p>
<p>Obviously, an ESLint-compatible interface is ideal in terms of familiarity and ease of migration from ESLint.</p>
<p>However, Oxlint is known for its excellent performance, and compromising that too much would not be desirable.</p>
<p>The main aim of our prototyping work over past few months has been to quantify what is the trade-off between performance
and ESLint compatibility, and to investigate if there's a &quot;have cake and eat it&quot; solution which satisfies both -
providing an ESLint-compatible API <em>and</em> acceptable performance (&quot;acceptable&quot; here means pretty damn fast!)</p>
<p>We believe that through a combination of different approaches, we've found a way to satisfy both demands.</p>
<h3 id="alternative-api-1" tabindex="-1">Alternative API <a class="header-anchor" href="#alternative-api-1" aria-label="Permalink to “Alternative API”">&#8203;</a></h3>
<p>See explanation <a href="/docs/guide/usage/linter/js-plugins.html#why-is-the-alternative-api-faster">in docs</a>
of why this API unlocks potential for higher performance.</p>
<h3 id="raw-transfer" tabindex="-1">Raw transfer <a class="header-anchor" href="#raw-transfer" aria-label="Permalink to “Raw transfer”">&#8203;</a></h3>
<p>Tools like Oxc represent the code of a JS/TS file as an &quot;AST&quot;
(<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noreferrer">abstract syntax tree</a>).
ASTs are really big - much much larger than the source code they represent.</p>
<p>Typically, the biggest barrier to performant interop between JS and native languages like Rust is the serialization
and deserialization involved in transferring such large data structures between the &quot;two worlds&quot;.</p>
<p>The simplest and most common way to move an AST between JS and Rust is: Serialize the AST to JSON, send it across to JS
as a string and then &quot;rehydrate&quot; it again with <code>JSON.parse</code>. But this is extremely slow. Often the cost of these
conversions is so high that they massively outweigh the performance gain of using native code in the first place.
Other serialization formats are more efficient than JSON, but they still have a sizeable overhead.</p>
<p>We have developed a scheme &quot;raw transfer&quot; which cuts out serialization altogether, by using Rust's native memory layout
as the serialization format (more details on how it works <a href="https://github.com/oxc-project/oxc/issues/2409" target="_blank" rel="noreferrer">here</a>).</p>
<p>&quot;Raw transfer&quot; is the base of the current implementation of JS plugins.</p>
<h3 id="lazy-deserialization" tabindex="-1">Lazy deserialization <a class="header-anchor" href="#lazy-deserialization" aria-label="Permalink to “Lazy deserialization”">&#8203;</a></h3>
<p>The 2nd biggest enemy of good perf, particularly when running JS across multiple CPU cores in worker threads,
is the garbage collector. Every object you create also needs to be destroyed to recover its memory.
In JS, this is the job of the garbage collector. JS engines like V8 are highly optimized, but still garbage collection
is an expensive process, and GC &quot;steals&quot; CPU resources from the actual workload.</p>
<p>We have prototyped an AST visitor which deserializes the AST <em>lazily</em>, and only deserializes the parts of the AST which
actually <em>need</em> to be.</p>
<p>For example, if your lint rule relates to class declarations, this visitor will fly through most of the AST without
doing much, and will only create JS objects for <code>ClassDeclaration</code> AST nodes, which are then passed to the rule's code
to process. For the rest of the AST (variable declarations, <code>if</code> statements, functions, etc) there is no need to create
node objects at all.</p>
<p>This has 2 effects:</p>
<ol>
<li>Raw transfer cuts the cost of serialization to zero. Laziness dramatically reduces the other side
(deserialization) too.</li>
<li>Greatly reduced garbage collector pressure.</li>
</ol>
<p>Deno has taken a similar approach, which is explained brilliantly in
<a href="https://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-11/" target="_blank" rel="noreferrer">Marvin Hagemeister's blog post</a>, and Deno lint
has a superbly efficient implementation.</p>
<p>However, we've found that it's the combination of lazy deserialization with &quot;raw transfer&quot; which delivers <em>really</em> good
performance. Our tests have found that, with both these overheads removed, JS plugins can run at much greater speed.</p>
<p>This optimization is not yet included in current version of JS plugins. We will implement it in a future version.</p>
<h2 id="try-it-out" tabindex="-1">Try it out! <a class="header-anchor" href="#try-it-out" aria-label="Permalink to “Try it out!”">&#8203;</a></h2>
<p>Please try out JS plugins and report your experience. All feedback - either positive or negative - is gratefully
received.</p>
<p>In particular, if you find that Oxlint is lacking some of the APIs you need for your plugins to work,
please let us know. We'll be filling in the gaps in the API over the next few months, and will prioritise those for
which there's greatest demand.</p>
<p>Happy linting!</p>
<hr>
<h4 id="edit-18th-oct-2025" tabindex="-1">Edit: 18th Oct 2025 <a class="header-anchor" href="#edit-18th-oct-2025" aria-label="Permalink to “Edit: 18th Oct 2025”">&#8203;</a></h4>
<p>The original version of this blog post published on 9th Oct contained benchmarks results which showed the performance
of Oxlint JS plugins to be far better than they are in reality. This was the result of a bug in Oxlint which was causing
JS plugins to be skipped on many files in certain circumstances when the config contains overrides. This bug lead to
the performance of JS plugins being way overestimated in the benchmarks we quoted.</p>
<p>We sincerely apologise for this mistake, and thank <a href="https://github.com/HerringtonDarkholme" target="_blank" rel="noreferrer">Herrington Darkholme</a>
for pointing out the error.</p>
]]></content:encoded>
        </item>
    </channel>
</rss>